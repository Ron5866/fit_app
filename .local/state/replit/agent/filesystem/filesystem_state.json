{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nThis is a fitness web application called \"BodyType Blueprint\" that uses AI to classify body types (Ectomorph, Mesomorph, Endomorph) from uploaded photos and provides personalized workout recommendations. The application features a modern, responsive design with a React frontend, Express.js backend, and PostgreSQL database integration via Drizzle ORM.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React 18 with TypeScript and Vite for fast development\n- **Styling**: Tailwind CSS with shadcn/ui component library for consistent, modern UI components\n- **State Management**: React Context for authentication state, TanStack Query for server state management\n- **Routing**: React Router for client-side navigation with protected routes\n- **File Upload**: React Dropzone for drag-and-drop image uploads\n- **Form Handling**: React Hook Form with Zod validation for type-safe forms\n\n## Backend Architecture\n- **Framework**: Express.js with TypeScript running on Node.js\n- **Development Server**: Custom Vite integration for hot module replacement in development\n- **API Structure**: RESTful API with `/api` prefix for all endpoints\n- **Request Logging**: Custom middleware for API request/response logging\n- **Error Handling**: Centralized error handling middleware\n\n## Data Storage\n- **Database**: PostgreSQL with Neon serverless hosting\n- **ORM**: Drizzle ORM for type-safe database operations\n- **Schema**: User management with username/password authentication\n- **Storage Interface**: Abstracted storage layer supporting both in-memory (development) and PostgreSQL (production)\n- **Migrations**: Drizzle Kit for database schema management\n\n## Authentication & Authorization\n- **Strategy**: Custom JWT-like authentication with localStorage persistence\n- **Protection**: Protected routes using React Router guards\n- **Session Management**: Client-side session storage with context provider\n- **User Management**: Username/password registration and login system\n\n## External Dependencies\n- **Database Hosting**: Neon Database (PostgreSQL serverless)\n- **UI Components**: Radix UI primitives for accessible, unstyled components\n- **Icons**: Lucide React for consistent iconography\n- **Styling**: PostCSS with Autoprefixer for CSS processing\n- **Development**: Replit-specific plugins for deployment and error handling\n- **Build Tool**: ESBuild for production bundling\n- **Image Processing**: Planned integration with AI/ML services for body type classification","size_bytes":2568},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1))\",\n          \"2\": \"hsl(var(--chart-2))\",\n          \"3\": \"hsl(var(--chart-3))\",\n          \"4\": \"hsl(var(--chart-4))\",\n          \"5\": \"hsl(var(--chart-5))\",\n        },\n        sidebar: {\n          DEFAULT: \"hsl(var(--sidebar-background))\",\n          foreground: \"hsl(var(--sidebar-foreground))\",\n          primary: \"hsl(var(--sidebar-primary))\",\n          \"primary-foreground\": \"hsl(var(--sidebar-primary-foreground))\",\n          accent: \"hsl(var(--sidebar-accent))\",\n          \"accent-foreground\": \"hsl(var(--sidebar-accent-foreground))\",\n          border: \"hsl(var(--sidebar-border))\",\n          ring: \"hsl(var(--sidebar-ring))\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2787},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n});\n","size_bytes":894},"project2.0/README.md":{"content":"# AI-Powered Diet Plan Generator\n\nA comprehensive full-stack web application that generates personalized diet plans using Google's Gemini AI. Built with React, Node.js, Express, and MongoDB.\n\n## 🌟 Features\n\n### Frontend (React + TypeScript + Tailwind CSS)\n- **Modern, Responsive UI**: Clean design with dark/light mode toggle\n- **Comprehensive Form**: Collects detailed user health and preference data\n- **BMI Calculator**: Real-time BMI calculation with health categories\n- **Interactive Results**: Expandable sections for easy reading\n- **PDF Export**: Download diet plans as PDF documents\n- **Loading States**: Beautiful animations during plan generation\n\n### Backend (Node.js + Express)\n- **RESTful API**: Clean endpoints for plan generation and data storage\n- **AI Integration**: Google Gemini AI for intelligent diet plan creation\n- **Database Support**: MongoDB integration for user data persistence\n- **Security**: Rate limiting, CORS, and security headers\n- **Error Handling**: Comprehensive error management\n\n### AI-Powered Features\n- **Personalized Plans**: Tailored recommendations based on user profile\n- **Comprehensive Analysis**: BMI calculation and goal timeline estimation\n- **Professional Guidance**: AI acts as certified nutritionist\n- **Structured Output**: Well-formatted meal plans and guidelines\n\n## 🚀 Quick Start\n\n### Prerequisites\n- Node.js (v16 or higher)\n- MongoDB (optional, for data persistence)\n- Google Gemini API key\n\n### Installation\n\n1. **Clone the repository**\n   ```bash\n   git clone <repository-url>\n   cd diet-plan-generator\n   ```\n\n2. **Install dependencies**\n   ```bash\n   npm run install-all\n   ```\n\n3. **Set up environment variables**\n   ```bash\n   cp server/.env.example server/.env\n   ```\n   \n   Edit `server/.env` and add your configuration:\n   ```env\n   GEMINI_API_KEY=your_gemini_api_key_here\n   MONGODB_URI=mongodb://localhost:27017/diet-plan-generator\n   ```\n\n4. **Get your Gemini API key**\n   - Visit [Google AI Studio](https://makersuite.google.com/app/apikey)\n   - Create a new API key\n   - Add it to your `.env` file\n\n5. **Start the development servers**\n   ```bash\n   npm run dev\n   ```\n\nThe application will be available at:\n- Frontend: http://localhost:5173\n- Backend: http://localhost:5000\n\n## 📁 Project Structure\n\n```\ndiet-plan-generator/\n├── client/                 # React frontend\n│   ├── src/\n│   │   ├── components/     # React components\n│   │   ├── types/         # TypeScript type definitions\n│   │   └── ...\n│   ├── package.json\n│   └── ...\n├── server/                # Express backend\n│   ├── index.js          # Main server file\n│   ├── package.json\n│   └── .env.example\n├── package.json          # Root package.json\n└── README.md\n```\n\n## 🔧 Configuration\n\n### Environment Variables\n\n#### Server (.env)\n- `GEMINI_API_KEY`: Your Google Gemini AI API key (required)\n- `MONGODB_URI`: MongoDB connection string (optional)\n- `PORT`: Server port (default: 5000)\n- `NODE_ENV`: Environment (development/production)\n\n### API Endpoints\n\n- `GET /api/health` - Health check endpoint\n- `POST /api/generate-plan` - Generate personalized diet plan\n- `POST /api/save-user-data` - Save user data to database\n\n## 🎯 User Input Fields\n\nThe application collects comprehensive user data:\n\n### Required Fields\n- Age (16-100 years)\n- Height (100-250 cm)\n- Current Weight (30-300 kg)\n- Target Weight (30-300 kg)\n- Fitness Goal (lose/gain/build muscle/maintain)\n- Dietary Preference (vegetarian/non-vegetarian/vegan/keto/paleo)\n- Sugar Intake Frequency (low/moderate/high)\n- Daily Water Intake (1-20 glasses)\n\n### Optional Fields\n- Upcoming Event\n- Sports Interest\n- Past Fitness Issues\n\n## 🤖 AI Integration\n\nThe application uses Google's Gemini AI to generate comprehensive diet plans including:\n\n- **Weekly Meal Plans**: 7-day structured meal schedules\n- **Nutritional Guidelines**: Calorie targets and macronutrient breakdowns\n- **Hydration Strategy**: Water intake recommendations\n- **Exercise Recommendations**: Complementary workout suggestions\n- **Lifestyle Tips**: Practical advice for sustainable habits\n- **Progress Tracking**: Metrics and monitoring guidelines\n\n## 🎨 UI/UX Features\n\n- **Responsive Design**: Works on all device sizes\n- **Dark/Light Mode**: Toggle between themes\n- **Smooth Animations**: Fade-in and slide-up effects\n- **Loading States**: Engaging loading animations\n- **Interactive Elements**: Hover effects and micro-interactions\n- **Accessibility**: Proper ARIA labels and keyboard navigation\n\n## 📱 Deployment\n\n### Frontend (Vercel)\n1. Connect your GitHub repository to Vercel\n2. Set build command: `cd client && npm run build`\n3. Set output directory: `client/dist`\n\n### Backend (Railway/Render)\n1. Connect your GitHub repository\n2. Set start command: `cd server && npm start`\n3. Add environment variables in the platform dashboard\n\n## 🔒 Security Features\n\n- Rate limiting (10 requests per 15 minutes)\n- CORS configuration\n- Security headers with Helmet\n- Input validation\n- Error handling without sensitive data exposure\n\n## 🧪 Testing\n\nThe application includes comprehensive error handling and validation:\n- Form validation with real-time feedback\n- API error handling\n- Graceful degradation when services are unavailable\n\n## 📄 License\n\nThis project is licensed under the MIT License.\n\n## 🤝 Contributing\n\n1. Fork the repository\n2. Create a feature branch\n3. Make your changes\n4. Add tests if applicable\n5. Submit a pull request\n\n## 📞 Support\n\nFor support and questions:\n- Create an issue in the GitHub repository\n- Check the health endpoint: `/api/health`\n\n## 🔮 Future Enhancements\n\n- User authentication and profiles\n- Progress tracking over time\n- Meal planning calendar\n- Shopping list generation\n- Integration with fitness trackers\n- Multi-language support\n- Recipe suggestions\n- Nutritionist consultation booking\n\n---\n\nBuilt with ❤️ for better health and nutrition","size_bytes":5992},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on port 5000\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = 5000;\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":1921},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // put application routes here\n  // prefix all routes with /api\n\n  // use storage to perform CRUD operations on the storage interface\n  // e.g. storage.insertUser(user) or storage.getUserByUsername(username)\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":473},"server/storage.ts":{"content":"import { users, type User, type InsertUser } from \"@shared/schema\";\n\n// modify the interface with any CRUD methods\n// you might need\n\nexport interface IStorage {\n  getUser(id: number): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<number, User>;\n  currentId: number;\n\n  constructor() {\n    this.users = new Map();\n    this.currentId = 1;\n  }\n\n  async getUser(id: number): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = this.currentId++;\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":1012},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2254},"shared/schema.ts":{"content":"import { pgTable, text, serial, integer, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: serial(\"id\").primaryKey(),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n","size_bytes":533},"client/src/App.css":{"content":"#root {\n  max-width: 1280px;\n  margin: 0 auto;\n  padding: 2rem;\n  text-align: center;\n}\n\n.logo {\n  height: 6em;\n  padding: 1.5em;\n  will-change: filter;\n  transition: filter 300ms;\n}\n.logo:hover {\n  filter: drop-shadow(0 0 2em #646cffaa);\n}\n.logo.react:hover {\n  filter: drop-shadow(0 0 2em #61dafbaa);\n}\n\n@keyframes logo-spin {\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n}\n\n@media (prefers-reduced-motion: no-preference) {\n  a:nth-of-type(2) .logo {\n    animation: logo-spin infinite 20s linear;\n  }\n}\n\n.card {\n  padding: 2em;\n}\n\n.read-the-docs {\n  color: #888;\n}\n","size_bytes":606},"client/src/App.tsx":{"content":"import { Toaster } from \"@/components/ui/toaster\";\nimport { Toaster as Sonner } from \"@/components/ui/sonner\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\nimport { AuthProvider } from \"@/hooks/useAuth\";\nimport ProtectedRoute from \"@/components/ProtectedRoute\";\nimport Index from \"./pages/Index\";\nimport AIModels from \"./pages/AIModels\";\nimport Auth from \"./pages/Auth\";\nimport Dashboard from \"./pages/Dashboard\";\nimport NotFound from \"./pages/NotFound\";\n\nconst App = () => (\n  <AuthProvider>\n    <TooltipProvider>\n      <Toaster />\n      <Sonner />\n      <BrowserRouter>\n        <Routes>\n          <Route path=\"/\" element={<Index />} />\n          <Route path=\"/ai-models\" element={<AIModels />} />\n          <Route path=\"/auth\" element={<Auth />} />\n          <Route path=\"/dashboard\" element={\n            <ProtectedRoute>\n              <Dashboard />\n            </ProtectedRoute>\n          } />\n          {/* ADD ALL CUSTOM ROUTES ABOVE THE CATCH-ALL \"*\" ROUTE */}\n          <Route path=\"*\" element={<NotFound />} />\n        </Routes>\n      </BrowserRouter>\n    </TooltipProvider>\n  </AuthProvider>\n);\n\nexport default App;\n","size_bytes":1205},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* Definition of the design system. All colors, gradients, fonts, etc should be defined here. \nAll colors MUST be HSL.\n*/\n\n@layer base {\n  :root {\n    --background: 0 0% 98%;\n    --foreground: 215 25% 15%;\n\n    --card: 0 0% 100%;\n    --card-foreground: 215 25% 15%;\n\n    --popover: 0 0% 100%;\n    --popover-foreground: 215 25% 15%;\n\n    --primary: 187 85% 55%;\n    --primary-foreground: 0 0% 100%;\n    --primary-glow: 187 85% 65%;\n\n    --secondary: 156 73% 65%;\n    --secondary-foreground: 0 0% 100%;\n\n    --muted: 210 20% 96%;\n    --muted-foreground: 215 15% 45%;\n\n    --accent: 280 65% 70%;\n    --accent-foreground: 0 0% 100%;\n\n    --destructive: 0 84.2% 60.2%;\n    --destructive-foreground: 0 0% 100%;\n\n    --border: 220 13% 91%;\n    --input: 220 13% 91%;\n    --ring: 187 85% 55%;\n\n    --fitness-gradient: linear-gradient(135deg, hsl(var(--primary)), hsl(var(--primary-glow)));\n    --hero-gradient: linear-gradient(135deg, hsl(var(--primary) / 0.9), hsl(var(--accent) / 0.8));\n    --card-gradient: linear-gradient(145deg, hsl(var(--card)), hsl(var(--muted)));\n    \n    --shadow-soft: 0 4px 20px hsl(var(--primary) / 0.1);\n    --shadow-medium: 0 8px 30px hsl(var(--primary) / 0.15);\n    --shadow-strong: 0 15px 40px hsl(var(--primary) / 0.2);\n    \n    --transition-smooth: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n    --transition-spring: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);\n\n    --radius: 0.5rem;\n\n    --sidebar-background: 0 0% 98%;\n\n    --sidebar-foreground: 240 5.3% 26.1%;\n\n    --sidebar-primary: 240 5.9% 10%;\n\n    --sidebar-primary-foreground: 0 0% 98%;\n\n    --sidebar-accent: 240 4.8% 95.9%;\n\n    --sidebar-accent-foreground: 240 5.9% 10%;\n\n    --sidebar-border: 220 13% 91%;\n\n    --sidebar-ring: 217.2 91.2% 59.8%;\n  }\n\n  .dark {\n    --background: 222.2 84% 4.9%;\n    --foreground: 210 40% 98%;\n\n    --card: 222.2 84% 4.9%;\n    --card-foreground: 210 40% 98%;\n\n    --popover: 222.2 84% 4.9%;\n    --popover-foreground: 210 40% 98%;\n\n    --primary: 210 40% 98%;\n    --primary-foreground: 222.2 47.4% 11.2%;\n\n    --secondary: 217.2 32.6% 17.5%;\n    --secondary-foreground: 210 40% 98%;\n\n    --muted: 217.2 32.6% 17.5%;\n    --muted-foreground: 215 20.2% 65.1%;\n\n    --accent: 217.2 32.6% 17.5%;\n    --accent-foreground: 210 40% 98%;\n\n    --destructive: 0 62.8% 30.6%;\n    --destructive-foreground: 210 40% 98%;\n\n    --border: 217.2 32.6% 17.5%;\n    --input: 217.2 32.6% 17.5%;\n    --ring: 212.7 26.8% 83.9%;\n    --sidebar-background: 240 5.9% 10%;\n    --sidebar-foreground: 240 4.8% 95.9%;\n    --sidebar-primary: 224.3 76.3% 48%;\n    --sidebar-primary-foreground: 0 0% 100%;\n    --sidebar-accent: 240 3.7% 15.9%;\n    --sidebar-accent-foreground: 240 4.8% 95.9%;\n    --sidebar-border: 240 3.7% 15.9%;\n    --sidebar-ring: 217.2 91.2% 59.8%;\n  }\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply bg-background text-foreground;\n  }\n}","size_bytes":2932},"client/src/main.tsx":{"content":"import { createRoot } from 'react-dom/client'\nimport App from './App.tsx'\nimport './index.css'\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":158},"client/src/vite-env.d.ts":{"content":"/// <reference types=\"vite/client\" />\n","size_bytes":38},"project2.0/client/postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}","size_bytes":79},"project2.0/client/tailwind.config.js":{"content":"/** @type {import('tailwindcss').Config} */\nexport default {\n  content: [\n    \"./index.html\",\n    \"./src/**/*.{js,ts,jsx,tsx}\",\n  ],\n  darkMode: 'class',\n  theme: {\n    extend: {\n      colors: {\n        primary: {\n          50: '#f0f9ff',\n          100: '#e0f2fe',\n          200: '#bae6fd',\n          300: '#7dd3fc',\n          400: '#38bdf8',\n          500: '#0ea5e9',\n          600: '#0284c7',\n          700: '#0369a1',\n          800: '#075985',\n          900: '#0c4a6e',\n        },\n        success: {\n          50: '#f0fdf4',\n          100: '#dcfce7',\n          200: '#bbf7d0',\n          300: '#86efac',\n          400: '#4ade80',\n          500: '#22c55e',\n          600: '#16a34a',\n          700: '#15803d',\n          800: '#166534',\n          900: '#14532d',\n        }\n      },\n      animation: {\n        'fade-in': 'fadeIn 0.5s ease-in-out',\n        'slide-up': 'slideUp 0.3s ease-out',\n        'pulse-slow': 'pulse 3s cubic-bezier(0.4, 0, 0.6, 1) infinite',\n      },\n      keyframes: {\n        fadeIn: {\n          '0%': { opacity: '0' },\n          '100%': { opacity: '1' },\n        },\n        slideUp: {\n          '0%': { transform: 'translateY(10px)', opacity: '0' },\n          '100%': { transform: 'translateY(0)', opacity: '1' },\n        },\n      },\n    },\n  },\n  plugins: [],\n}","size_bytes":1286},"project2.0/client/vite.config.ts":{"content":"import { defineConfig } from 'vite'\nimport react from '@vitejs/plugin-react'\n\n// https://vitejs.dev/config/\nexport default defineConfig({\n  plugins: [react()],\n  server: {\n    proxy: {\n      '/api': {\n        target: 'http://localhost:5001',\n        changeOrigin: true,\n      },\n    },\n  },\n})","size_bytes":293},"project2.0/server/index.js":{"content":"import express from 'express';\nimport cors from 'cors';\nimport dotenv from 'dotenv';\nimport helmet from 'helmet';\nimport rateLimit from 'express-rate-limit';\nimport mongoose from 'mongoose';\nimport { GoogleGenerativeAI } from '@google/generative-ai';\n\ndotenv.config();\n\nconst app = express();\nconst PORT = process.env.PORT || 5001;\n\n// Security middleware\napp.use(helmet());\napp.use(cors({\n  origin: process.env.NODE_ENV === 'production' \n    ? ['https://your-frontend-domain.com'] \n    : ['http://localhost:5173', 'http://localhost:3000'],\n  credentials: true\n}));\n\n// Rate limiting\nconst limiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // Increased limit for development\n  message: 'Too many requests from this IP, please try again later.'\n});\napp.use('/api/', limiter);\n\napp.use(express.json({ limit: '10mb' }));\n\n// MongoDB connection (optional)\nconst connectDB = async () => {\n  try {\n    if (process.env.MONGODB_URI) {\n      await mongoose.connect(process.env.MONGODB_URI);\n      console.log('✅ MongoDB connected successfully');\n    } else {\n      console.log('ℹ️  MongoDB URI not provided, running without database');\n    }\n  } catch (error) {\n    console.error('❌ MongoDB connection error:', error.message);\n    console.log('ℹ️  Continuing without database...');\n  }\n};\n\n// User data schema\nconst userDataSchema = new mongoose.Schema({\n  age: { type: Number, required: true },\n  height: { type: Number, required: true },\n  currentWeight: { type: Number, required: true },\n  targetWeight: { type: Number, required: true },\n  fitnessGoal: { type: String, required: true },\n  dietaryPreference: { type: String, required: true },\n  sugarIntake: { type: String, required: true },\n  waterIntake: { type: Number, required: true },\n  upcomingEvent: String,\n  sportsInterest: String,\n  pastFitnessIssues: String,\n  bmi: Number,\n  bmiCategory: String,\n  estimatedGoalDate: String,\n  aiResponse: String,\n  timestamp: { type: Date, default: Date.now }\n});\n\nconst UserData = mongoose.models.UserData || mongoose.model('UserData', userDataSchema);\n\n// Initialize Gemini AI\nlet genAI;\nif (process.env.GEMINI_API_KEY) {\n  try {\n    genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);\n    console.log('✅ Gemini AI initialized successfully with key:', process.env.GEMINI_API_KEY.substring(0, 10) + '...');\n  } catch (error) {\n    console.error('❌ Gemini AI initialization error:', error.message);\n  }\n} else {\n  console.warn('⚠️  GEMINI_API_KEY not provided. AI features will not work.');\n}\n\n// Helper functions\nconst calculateBMI = (weight, height) => {\n  const heightInMeters = height / 100;\n  return weight / (heightInMeters * heightInMeters);\n};\n\nconst getBMICategory = (bmi) => {\n  if (bmi < 18.5) return 'Underweight';\n  if (bmi < 25) return 'Normal';\n  if (bmi < 30) return 'Overweight';\n  return 'Obese';\n};\n\nconst getEstimatedGoalDate = (currentWeight, targetWeight) => {\n  const weightDifference = Math.abs(currentWeight - targetWeight);\n  const daysNeeded = Math.ceil(weightDifference * 15); // 15 days per kg\n  const targetDate = new Date();\n  targetDate.setDate(targetDate.getDate() + daysNeeded);\n  return targetDate.toLocaleDateString('en-US', { \n    year: 'numeric', \n    month: 'long', \n    day: 'numeric' \n  });\n};\n\nconst buildGeminiPrompt = (userData, bmiData) => {\n  const goalText = {\n    'lose_weight': 'lose weight',\n    'gain_weight': 'gain weight',\n    'build_muscle': 'build muscle mass',\n    'maintain': 'maintain current weight'\n  };\n\n  const dietText = {\n    'vegetarian': 'vegetarian',\n    'non_vegetarian': 'non-vegetarian',\n    'vegan': 'vegan',\n    'keto': 'ketogenic',\n    'paleo': 'paleo'\n  };\n\n  return `You are a certified nutritionist and fitness expert. Create a comprehensive, personalized diet plan for the following individual:\n\n**PERSONAL PROFILE:**\n- Age: ${userData.age} years\n- Height: ${userData.height} cm\n- Current Weight: ${userData.currentWeight} kg\n- Target Weight: ${userData.targetWeight} kg\n\nClient Profile: ${userData.age}-year-old, ${userData.height} cm, ${userData.currentWeight} kg, aiming for ${userData.targetWeight} kg, ${dietText[userData.dietaryPreference]}, ${userData.sugarIntake} consumes sugar, drinks ${(userData.waterIntake * 0.25).toFixed(1)}L water daily${userData.sportsInterest ? `, plays ${userData.sportsInterest.toLowerCase()}` : ''}${userData.pastFitnessIssues ? `, ${userData.pastFitnessIssues.toLowerCase()}` : ', no past fitness issues'}.\n\nGoal: ${goalText[userData.fitnessGoal].charAt(0).toUpperCase() + goalText[userData.fitnessGoal].slice(1).replace('_', ' ')} ${Math.abs(userData.currentWeight - userData.targetWeight)} kg through a healthy, balanced ${dietText[userData.dietaryPreference]} diet and exercise regime.\n\nCalorie Target: Approximately ${userData.fitnessGoal === 'lose_weight' ? '1800-2000' : userData.fitnessGoal === 'gain_weight' ? '2200-2500' : '2000-2200'} calories per day (This creates a ${userData.fitnessGoal === 'lose_weight' ? 'deficit for weight loss' : userData.fitnessGoal === 'gain_weight' ? 'surplus for weight gain' : 'balance for maintenance'}, but is enough to support ${userData.sportsInterest ? userData.sportsInterest.toLowerCase() + ' training' : 'daily activities'}. Individual needs vary, so monitor progress and adjust if needed).\n\nWeekly Meal Plan (Example - Adjust portion sizes as needed):\n\nDay 1:\n\n• Breakfast (350 calories): [Detailed ${dietText[userData.dietaryPreference]} breakfast with specific foods]\n• Lunch (400 calories): [Detailed ${dietText[userData.dietaryPreference]} lunch with specific foods]\n• Snack (150 calories): [Healthy snack option]\n• Dinner (450 calories): [Detailed ${dietText[userData.dietaryPreference]} dinner with specific foods]\n• Snack (100 calories): [Light evening snack]\n\nDay 2:\n\n• Breakfast (300 calories): [Different ${dietText[userData.dietaryPreference]} breakfast option]\n• Lunch (450 calories): [Different ${dietText[userData.dietaryPreference]} lunch option]\n• Snack (150 calories): [Different healthy snack]\n• Dinner (500 calories): [Different ${dietText[userData.dietaryPreference]} dinner option]\n• Snack (100 calories): [Different light snack]\n\nDay 3:\n\n• Breakfast (350 calories): [Third ${dietText[userData.dietaryPreference]} breakfast variation]\n• Lunch (400 calories): [Third ${dietText[userData.dietaryPreference]} lunch variation]\n• Snack (150 calories): [Third snack option]\n• Dinner (450 calories): [Third ${dietText[userData.dietaryPreference]} dinner variation]\n• Snack (100 calories): [Third light snack option]\n\nDay 4:\n\n• Breakfast (300 calories): [Fourth ${dietText[userData.dietaryPreference]} breakfast option]\n• Lunch (500 calories): [Fourth ${dietText[userData.dietaryPreference]} lunch option]\n• Snack (100 calories): [Fourth snack option]\n• Dinner (450 calories): [Fourth ${dietText[userData.dietaryPreference]} dinner option]\n• Snack (150 calories): [Fourth evening snack]\n\nDay 5 - 7: Repeat meals from the previous days, adjusting based on your preferences and availability. Focus on variety and ensure you're getting enough protein.\n\nRecommended Exercise Routine:\n\n• ${userData.sportsInterest ? `${userData.sportsInterest} Training: Continue your regular ${userData.sportsInterest.toLowerCase()} training schedule.` : 'Regular Exercise: Include 30-45 minutes of moderate exercise daily.'}\n• Strength Training (2-3 times/week): Focus on compound exercises like squats, lunges, deadlifts, push-ups, and rows. Include core work. This builds muscle, boosts metabolism, and supports performance${userData.sportsInterest ? ` on the field` : ''}.\n• Cardio (2-3 times/week): 30-45 minutes of moderate-intensity cardio like running, cycling, or swimming. This burns calories and improves cardiovascular health.\n\nHydration and Recovery Tips:\n\n• Water: Aim for at least ${(userData.waterIntake * 0.25).toFixed(1)}L of water per day, especially on training days. Carry a water bottle with you and sip throughout the day.\n• Electrolytes: Replenish electrolytes lost during training with electrolyte drinks or by consuming foods rich in potassium and sodium (bananas, coconut water).\n• Sleep: Aim for 7-9 hours of quality sleep per night. This is crucial for muscle recovery and overall health.\n• Protein: Ensure adequate protein intake (around 1.4-1.8g/kg of body weight) for muscle repair and growth. Good sources include lentils, beans, tofu, tempeh, quinoa, nuts, seeds, and Greek yogurt.\n• Post-Workout Nutrition: Consume a post-workout snack or meal containing carbohydrates and protein within 30-60 minutes of training to replenish glycogen stores and promote muscle recovery. Examples: Smoothie with protein powder and fruit, Greek yogurt with berries and granola, or a whole-wheat sandwich with hummus and vegetables.\n\nImportant Considerations:\n\n• Consult a Doctor: This plan is a general guideline. It's important to consult with your doctor or a registered dietitian before making any significant dietary changes, especially if you have any underlying health conditions.\n• Listen to Your Body: Pay attention to your body's hunger and fullness cues. Adjust portion sizes as needed and don't restrict calories too severely.\n• Gradual Changes: Make gradual changes to your diet rather than drastic ones. This will help you stick to the plan long-term.\n• Stay Consistent: Consistency is key to achieving your goals. Stick to the plan as much as possible, but don't be too hard on yourself if you have occasional slip-ups.\n• Monitor Progress: Track your weight, measurements, and how you feel. Adjust the plan as needed based on your progress and feedback from your body.\n\nProvide specific, detailed meal descriptions that strictly follow the ${dietText[userData.dietaryPreference]} dietary preference. Include exact foods, preparation methods, and make it practical for daily implementation.`;\n};\n\n// Routes\napp.get('/api/health', (req, res) => {\n  res.json({ \n    status: 'OK', \n    timestamp: new Date().toISOString(),\n    services: {\n      database: mongoose.connection.readyState === 1 ? 'Connected' : 'Disconnected',\n      ai: genAI ? 'Available' : 'Not configured'\n    }\n  });\n});\n\napp.post('/api/generate-plan', async (req, res) => {\n  try {\n    console.log('📝 Received plan generation request');\n    const userData = req.body;\n    \n    // Validate required fields\n    const requiredFields = ['age', 'height', 'currentWeight', 'targetWeight', 'fitnessGoal', 'dietaryPreference', 'sugarIntake', 'waterIntake'];\n    for (const field of requiredFields) {\n      if (userData[field] === undefined || userData[field] === null) {\n        console.error(`❌ Missing required field: ${field}`);\n        return res.status(400).json({ error: `Missing required field: ${field}` });\n      }\n    }\n\n    // Calculate BMI and related data\n    const bmi = calculateBMI(userData.currentWeight, userData.height);\n    const bmiCategory = getBMICategory(bmi);\n    const estimatedGoalDate = getEstimatedGoalDate(userData.currentWeight, userData.targetWeight);\n    \n    const bmiData = {\n      bmi,\n      category: bmiCategory,\n      estimatedGoalDate\n    };\n\n    console.log('🧮 BMI calculated:', bmi.toFixed(1), bmiCategory);\n\n    let aiResponse = '';\n    \n    if (genAI) {\n      try {\n        console.log('🤖 Generating AI response...');\n        const model = genAI.getGenerativeModel({ model: \"gemini-1.5-pro-latest\" });\n        const prompt = buildGeminiPrompt(userData, bmiData);\n        \n        const result = await model.generateContent(prompt);\n        const response = await result.response;\n        aiResponse = response.text();\n        console.log('✅ AI response generated successfully');\n      } catch (aiError) {\n        console.error('❌ AI generation error:', aiError.message);\n        // Provide fallback response\n        aiResponse = `**Personalized Diet Plan**\n\n**Weekly Meal Plan Overview**\nBased on your profile (Age: ${userData.age}, Goal: ${userData.fitnessGoal}, Diet: ${userData.dietaryPreference}), here's your customized plan:\n\n**Day 1-7 Structure:**\n- **Breakfast (7-8 AM):** High-protein options like oats with nuts, eggs, or smoothies\n- **Mid-Morning Snack (10 AM):** Fresh fruits or nuts\n- **Lunch (12-1 PM):** Balanced meals with lean proteins, complex carbs, and vegetables\n- **Evening Snack (4 PM):** Healthy options like yogurt or herbal tea\n- **Dinner (7-8 PM):** Light, nutritious meals with emphasis on vegetables\n\n**Daily Nutritional Guidelines**\n- Target Calories: ${userData.fitnessGoal === 'lose_weight' ? '1500-1800' : userData.fitnessGoal === 'gain_weight' ? '2200-2500' : '1800-2000'} calories\n- Protein: 25-30% of total calories\n- Carbohydrates: 45-50% of total calories\n- Fats: 20-25% of total calories\n\n**Hydration Strategy**\n- Drink ${userData.waterIntake} glasses of water daily\n- Start your day with warm water\n- Have water 30 minutes before meals\n- Avoid sugary drinks\n\n**Exercise Recommendations**\n- ${userData.sportsInterest ? `Continue with ${userData.sportsInterest}` : 'Include 30 minutes of moderate exercise daily'}\n- Mix cardio and strength training\n- Take rest days for recovery\n\n**Lifestyle Tips**\n- Meal prep on weekends\n- Eat slowly and mindfully\n- Get 7-8 hours of sleep\n- Manage stress through meditation or yoga\n\n**Progress Tracking**\n- Weigh yourself weekly at the same time\n- Take body measurements monthly\n- Monitor energy levels and mood\n- Track your food intake\n\n**Important Considerations**\n- Focus on whole, unprocessed foods\n- ${userData.sugarIntake === 'high' ? 'Gradually reduce sugar intake' : 'Maintain current sugar levels'}\n- ${userData.pastFitnessIssues ? `Consider your past issues: ${userData.pastFitnessIssues}` : 'Listen to your body'}\n- Consult a healthcare provider before making major dietary changes\n\nThis plan is designed to help you reach your target weight of ${userData.targetWeight}kg by ${estimatedGoalDate}. Stay consistent and be patient with the process!`;\n      }\n    } else {\n      console.warn('⚠️  AI service not available, using fallback response');\n      aiResponse = 'AI service is temporarily unavailable. Please check your API key configuration.';\n    }\n\n    // Save to database if available\n    if (mongoose.connection.readyState === 1) {\n      try {\n        const newUserData = new UserData({\n          ...userData,\n          bmi,\n          bmiCategory,\n          estimatedGoalDate,\n          aiResponse\n        });\n        await newUserData.save();\n        console.log('💾 User data saved to database');\n      } catch (dbError) {\n        console.error('❌ Database save error:', dbError.message);\n      }\n    }\n\n    const response = {\n      userData,\n      bmiData,\n      aiResponse,\n      timestamp: new Date().toISOString()\n    };\n\n    console.log('✅ Plan generated successfully');\n    res.json(response);\n  } catch (error) {\n    console.error('❌ Error generating plan:', error.message);\n    res.status(500).json({ \n      error: 'Failed to generate diet plan',\n      details: error.message \n    });\n  }\n});\n\napp.post('/api/save-user-data', async (req, res) => {\n  try {\n    if (mongoose.connection.readyState !== 1) {\n      return res.status(503).json({ error: 'Database not available' });\n    }\n\n    const userData = new UserData(req.body);\n    await userData.save();\n    res.json({ message: 'User data saved successfully', id: userData._id });\n  } catch (error) {\n    console.error('Error saving user data:', error);\n    res.status(500).json({ error: 'Failed to save user data' });\n  }\n});\n\n// Error handling middleware\napp.use((err, req, res, next) => {\n  console.error('❌ Server error:', err.stack);\n  res.status(500).json({ error: 'Something went wrong!' });\n});\n\n// 404 handler\napp.use('*', (req, res) => {\n  res.status(404).json({ error: 'Route not found' });\n});\n\n// Graceful shutdown\nprocess.on('SIGTERM', () => {\n  console.log('🛑 SIGTERM received, shutting down gracefully');\n  process.exit(0);\n});\n\nprocess.on('SIGINT', () => {\n  console.log('🛑 SIGINT received, shutting down gracefully');\n  process.exit(0);\n});\n\n// Start server\nconst startServer = async () => {\n  try {\n    await connectDB();\n    \n    app.listen(PORT, () => {\n      console.log(`🚀 Server running on port ${PORT}`);\n      console.log(`🔍 Health check: http://localhost:${PORT}/api/health`);\n      console.log(`🤖 AI Status: ${genAI ? '✅ Ready' : '❌ Not configured'}`);\n    });\n  } catch (error) {\n    console.error('❌ Failed to start server:', error.message);\n    process.exit(1);\n  }\n};\n\nstartServer();","size_bytes":16519},"client/src/components/BMICalculator.tsx":{"content":"import React from 'react';\nimport { Calculator, TrendingUp, TrendingDown, Minus } from 'lucide-react';\n\ninterface BMICalculatorProps {\n  height: number;\n  weight: number;\n  targetWeight: number;\n}\n\nconst BMICalculator: React.FC<BMICalculatorProps> = ({ height, weight, targetWeight }) => {\n  const calculateBMI = (weight: number, height: number): number => {\n    const heightInMeters = height / 100;\n    return weight / (heightInMeters * heightInMeters);\n  };\n\n  const getBMICategory = (bmi: number): { category: string; color: string } => {\n    if (bmi < 18.5) return { category: 'Underweight', color: 'text-blue-600' };\n    if (bmi < 25) return { category: 'Normal', color: 'text-green-600' };\n    if (bmi < 30) return { category: 'Overweight', color: 'text-yellow-600' };\n    return { category: 'Obese', color: 'text-red-600' };\n  };\n\n  const getEstimatedDate = (currentWeight: number, targetWeight: number): string => {\n    const weightDifference = Math.abs(currentWeight - targetWeight);\n    const daysNeeded = Math.ceil(weightDifference * 15); // 15 days per kg\n    const targetDate = new Date();\n    targetDate.setDate(targetDate.getDate() + daysNeeded);\n    return targetDate.toLocaleDateString('en-US', { \n      year: 'numeric', \n      month: 'long', \n      day: 'numeric' \n    });\n  };\n\n  const currentBMI = calculateBMI(weight, height);\n  const targetBMI = calculateBMI(targetWeight, height);\n  const currentBMIData = getBMICategory(currentBMI);\n  const targetBMIData = getBMICategory(targetBMI);\n  const estimatedDate = getEstimatedDate(weight, targetWeight);\n\n  const getGoalIcon = () => {\n    if (targetWeight < weight) return <TrendingDown className=\"w-5 h-5 text-red-500\" />;\n    if (targetWeight > weight) return <TrendingUp className=\"w-5 h-5 text-green-500\" />;\n    return <Minus className=\"w-5 h-5 text-gray-500\" />;\n  };\n\n  return (\n    <div className=\"bg-gradient-to-br from-gray-800/50 to-gray-700/50 rounded-lg p-6 border border-gray-600\">\n      <div className=\"flex items-center mb-4\">\n        <Calculator className=\"w-6 h-6 text-cyan-400 mr-2\" />\n        <h3 className=\"text-xl font-semibold text-white\">\n          BMI Analysis\n        </h3>\n      </div>\n      \n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n        <div className=\"text-center\">\n          <div className=\"text-3xl font-bold text-cyan-400 mb-1\">\n            {currentBMI.toFixed(1)}\n          </div>\n          <div className={`text-sm font-medium ${currentBMIData.color.replace('text-', 'text-')} mb-1`}>\n            {currentBMIData.category}\n          </div>\n          <div className=\"text-xs text-gray-400\">\n            Current BMI\n          </div>\n        </div>\n        \n        <div className=\"text-center\">\n          <div className=\"text-3xl font-bold text-cyan-400 mb-1\">\n            {targetBMI.toFixed(1)}\n          </div>\n          <div className={`text-sm font-medium ${targetBMIData.color.replace('text-', 'text-')} mb-1`}>\n            {targetBMIData.category}\n          </div>\n          <div className=\"text-xs text-gray-400\">\n            Target BMI\n          </div>\n        </div>\n        \n        <div className=\"text-center\">\n          <div className=\"flex items-center justify-center mb-2\">\n            {getGoalIcon()}\n            <span className=\"text-lg font-semibold text-white ml-2\">\n              {Math.abs(weight - targetWeight).toFixed(1)} kg\n            </span>\n          </div>\n          <div className=\"text-sm text-gray-300 mb-1\">\n            Goal by {estimatedDate}\n          </div>\n          <div className=\"text-xs text-gray-400\">\n            Estimated timeline\n          </div>\n        </div>\n      </div>\n      \n      <div className=\"mt-4 p-3 bg-gray-800/50 rounded-lg border border-gray-700\">\n        <p className=\"text-sm text-gray-300 text-center\">\n          <strong>Note:</strong> Timeline estimate is based on healthy weight change of ~0.5kg per week. \n          Actual results may vary based on individual factors.\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default BMICalculator;","size_bytes":4035},"client/src/components/BodyTypeResult.tsx":{"content":"import { Card } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { User, Target, Zap } from \"lucide-react\";\n\ninterface BodyTypeResultProps {\n  bodyType: 'Ectomorph' | 'Mesomorph' | 'Endomorph';\n  confidence: number;\n  onGetPlan: () => void;\n}\n\nconst BodyTypeResult = ({ bodyType, confidence, onGetPlan }: BodyTypeResultProps) => {\n  const getBodyTypeInfo = (type: string) => {\n    switch (type) {\n      case 'Ectomorph':\n        return {\n          description: 'Naturally lean with a fast metabolism',\n          traits: ['Lean build', 'Fast metabolism', 'Difficulty gaining weight'],\n          color: 'from-accent to-accent/70',\n          icon: Zap\n        };\n      case 'Mesomorph':\n        return {\n          description: 'Naturally muscular with balanced metabolism',\n          traits: ['Athletic build', 'Balanced metabolism', 'Gains muscle easily'],\n          color: 'from-primary to-primary-glow',\n          icon: Target\n        };\n      case 'Endomorph':\n        return {\n          description: 'Naturally curvy with slower metabolism',\n          traits: ['Rounded build', 'Slower metabolism', 'Gains weight easily'],\n          color: 'from-secondary to-secondary/70',\n          icon: User\n        };\n      default:\n        return {\n          description: '',\n          traits: [],\n          color: 'from-primary to-primary-glow',\n          icon: User\n        };\n    }\n  };\n\n  const info = getBodyTypeInfo(bodyType);\n  const IconComponent = info.icon;\n\n  return (\n    <section className=\"py-20 px-6\">\n      <div className=\"max-w-4xl mx-auto text-center\">\n        <h2 className=\"text-4xl md:text-5xl font-bold mb-12 text-white\">\n          Your Body Type Result\n        </h2>\n\n        <div className=\"p-8 max-w-2xl mx-auto bg-gradient-to-br from-gray-900 to-gray-800 rounded-2xl border border-gray-700/50 shadow-2xl hover:border-purple-500/50 transition-all duration-500\">\n          <div className=\"text-center space-y-6\">\n            {/* Icon and Body Type */}\n            <div className={`mx-auto w-20 h-20 bg-gradient-to-br ${info.color} rounded-full flex items-center justify-center shadow-medium`}>\n              <IconComponent className=\"h-10 w-10 text-white\" />\n            </div>\n\n            <div>\n              <h3 className=\"text-3xl font-bold text-white mb-2\">\n                You are a {bodyType}\n              </h3>\n              <p className=\"text-lg text-gray-300\">\n                {info.description}\n              </p>\n            </div>\n\n            {/* Confidence Score */}\n            <div className=\"space-y-2\">\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm font-medium text-white\">Confidence Score</span>\n                <div className=\"bg-gradient-to-r from-purple-500 to-pink-500 text-white px-3 py-1 rounded-full text-sm font-medium\">\n                  {confidence}% Match\n                </div>\n              </div>\n              <div className=\"w-full bg-gray-700 rounded-full h-3\">\n                <div \n                  className=\"bg-gradient-to-r from-purple-500 to-pink-500 h-3 rounded-full transition-all duration-500\"\n                  style={{ width: `${confidence}%` }}\n                />\n              </div>\n            </div>\n\n            {/* Traits */}\n            <div className=\"bg-gray-800/50 p-6 rounded-lg border border-gray-700\">\n              <h4 className=\"font-semibold text-white mb-3\">Key Characteristics</h4>\n              <ul className=\"space-y-2\">\n                {info.traits.map((trait, index) => (\n                  <li key={index} className=\"text-gray-300 text-sm flex items-center gap-2\">\n                    <div className=\"w-2 h-2 bg-gradient-to-r from-purple-400 to-pink-400 rounded-full\" />\n                    {trait}\n                  </li>\n                ))}\n              </ul>\n            </div>\n\n            {/* Action Button */}\n            <button \n              onClick={onGetPlan}\n              className=\"w-full bg-gradient-to-r from-purple-500 via-pink-500 to-blue-500 hover:from-purple-600 hover:via-pink-600 hover:to-blue-600 text-white font-semibold py-3 px-6 rounded-lg transition-all duration-300 transform hover:scale-105 flex items-center justify-center group\"\n            >\n              Get My Personalized Workout Plan\n              <Target className=\"ml-2 h-5 w-5 group-hover:rotate-12 transition-transform\" />\n            </button>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default BodyTypeResult;","size_bytes":4621},"client/src/components/DietForm.tsx":{"content":"import React, { useState } from 'react';\nimport { Calculator, Target, Droplets, Calendar, Activity, AlertCircle } from 'lucide-react';\nimport { UserData, DietPlanResponse } from '@/types/diet';\nimport BMICalculator from './BMICalculator';\nimport LoadingSpinner from './LoadingSpinner';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface DietFormProps {\n  onPlanGenerated: (plan: DietPlanResponse) => void;\n  loading: boolean;\n  setLoading: (loading: boolean) => void;\n}\n\nconst DietForm: React.FC<DietFormProps> = ({ onPlanGenerated, loading, setLoading }) => {\n  const [formData, setFormData] = useState<UserData>({\n    age: 25,\n    height: 170,\n    currentWeight: 70,\n    targetWeight: 65,\n    fitnessGoal: 'lose_weight',\n    dietaryPreference: 'vegetarian',\n    sugarIntake: 'moderate',\n    waterIntake: 8,\n    upcomingEvent: '',\n    sportsInterest: '',\n    pastFitnessIssues: '',\n  });\n\n  const [errors, setErrors] = useState<Partial<UserData>>({});\n  const { toast } = useToast();\n\n  const validateForm = (): boolean => {\n    const newErrors: Partial<UserData> = {};\n\n    if (formData.age < 16 || formData.age > 100) {\n      newErrors.age = 16;\n    }\n    if (formData.height < 100 || formData.height > 250) {\n      newErrors.height = 100;\n    }\n    if (formData.currentWeight < 30 || formData.currentWeight > 300) {\n      newErrors.currentWeight = 30;\n    }\n    if (formData.targetWeight < 30 || formData.targetWeight > 300) {\n      newErrors.targetWeight = 30;\n    }\n    if (formData.waterIntake < 1 || formData.waterIntake > 20) {\n      newErrors.waterIntake = 1;\n    }\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!validateForm()) {\n      return;\n    }\n\n    setLoading(true);\n    \n    try {\n      // Simulate API call for now\n      await new Promise(resolve => setTimeout(resolve, 3000));\n      \n      // Mock response - in production this would be from your backend\n      const mockResponse: DietPlanResponse = {\n        userData: formData,\n        bmiData: {\n          bmi: formData.currentWeight / ((formData.height / 100) ** 2),\n          category: 'Normal',\n          estimatedGoalDate: new Date(Date.now() + 90 * 24 * 60 * 60 * 1000).toLocaleDateString()\n        },\n        aiResponse: `**Personalized Diet Plan for ${formData.fitnessGoal.replace('_', ' ')}**\n\nBased on your profile, here's your customized plan:\n\n**Daily Calorie Target:** ${formData.fitnessGoal === 'lose_weight' ? '1800-2000' : formData.fitnessGoal === 'gain_weight' ? '2500-2800' : '2200-2400'} calories\n\n**Meal Structure:**\n- Breakfast: 25% of daily calories\n- Lunch: 35% of daily calories  \n- Dinner: 30% of daily calories\n- Snacks: 10% of daily calories\n\n**Key Recommendations:**\n- Follow ${formData.dietaryPreference} diet preferences\n- Drink ${formData.waterIntake} glasses of water daily\n- ${formData.sugarIntake === 'low' ? 'Maintain low sugar intake' : formData.sugarIntake === 'moderate' ? 'Keep sugar intake moderate' : 'Gradually reduce sugar intake'}\n\n**Sample Daily Menu:**\n\n**Breakfast:**\n- Oatmeal with fruits and nuts\n- Green tea or coffee\n\n**Lunch:**\n- Quinoa bowl with vegetables\n- Lean protein source\n- Side salad\n\n**Dinner:**\n- Grilled vegetables\n- Brown rice or whole grain\n- Protein as per dietary preference\n\n**Snacks:**\n- Fresh fruits\n- Nuts or seeds\n- Yogurt (if not vegan)\n\n**Exercise Recommendations:**\n${formData.sportsInterest ? `Continue with ${formData.sportsInterest} activities` : 'Include 30 minutes of moderate exercise daily'}\n\n**Timeline:**\nExpected to reach target weight by: ${new Date(Date.now() + 90 * 24 * 60 * 60 * 1000).toLocaleDateString()}`,\n        timestamp: new Date().toISOString()\n      };\n\n      onPlanGenerated(mockResponse);\n      toast({\n        title: \"Diet Plan Generated!\",\n        description: \"Your personalized diet plan has been created successfully.\",\n      });\n    } catch (error) {\n      console.error('Error generating plan:', error);\n      toast({\n        variant: \"destructive\",\n        title: \"Error\",\n        description: \"Failed to generate diet plan. Please try again.\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleInputChange = (field: keyof UserData, value: any) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n    if (errors[field]) {\n      setErrors(prev => ({ ...prev, [field]: undefined }));\n    }\n  };\n\n  if (loading) {\n    return <LoadingSpinner />;\n  }\n\n  return (\n    <div className=\"max-w-4xl mx-auto\">\n      <div className=\"bg-gradient-to-br from-gray-900 to-gray-800 rounded-2xl border border-gray-700/50 shadow-2xl p-8\">\n        <div className=\"mb-8\">\n          <h2 className=\"text-3xl font-bold text-white mb-2\">\n            Tell us about yourself\n          </h2>\n          <p className=\"text-gray-300\">\n            Provide your details to get a personalized diet plan\n          </p>\n        </div>\n\n        <form onSubmit={handleSubmit} className=\"space-y-8\">\n          {/* Basic Information */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                <Calculator className=\"w-4 h-4 inline mr-2\" />\n                Age (years)\n              </label>\n              <input\n                type=\"number\"\n                value={formData.age}\n                onChange={(e) => handleInputChange('age', parseInt(e.target.value))}\n                className={`w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent ${errors.age ? 'border-red-500' : 'border-gray-600'} bg-gray-800 text-white placeholder:text-gray-400`}\n                min=\"16\"\n                max=\"100\"\n                required\n              />\n              {errors.age && (\n                <p className=\"text-red-500 text-xs mt-1 flex items-center\">\n                  <AlertCircle className=\"w-3 h-3 mr-1\" />\n                  Age must be between 16-100\n                </p>\n              )}\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                Height (cm)\n              </label>\n              <input\n                type=\"number\"\n                value={formData.height}\n                onChange={(e) => handleInputChange('height', parseInt(e.target.value))}\n                className={`w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent ${errors.height ? 'border-red-500' : 'border-gray-600'} bg-gray-800 text-white placeholder:text-gray-400`}\n                min=\"100\"\n                max=\"250\"\n                required\n              />\n              {errors.height && (\n                <p className=\"text-red-500 text-xs mt-1 flex items-center\">\n                  <AlertCircle className=\"w-3 h-3 mr-1\" />\n                  Height must be between 100-250 cm\n                </p>\n              )}\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                Current Weight (kg)\n              </label>\n              <input\n                type=\"number\"\n                value={formData.currentWeight}\n                onChange={(e) => handleInputChange('currentWeight', parseInt(e.target.value))}\n                className={`w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent ${errors.currentWeight ? 'border-red-500' : 'border-gray-600'} bg-gray-800 text-white placeholder:text-gray-400`}\n                min=\"30\"\n                max=\"300\"\n                required\n              />\n              {errors.currentWeight && (\n                <p className=\"text-red-500 text-xs mt-1 flex items-center\">\n                  <AlertCircle className=\"w-3 h-3 mr-1\" />\n                  Weight must be between 30-300 kg\n                </p>\n              )}\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                <Target className=\"w-4 h-4 inline mr-2\" />\n                Target Weight (kg)\n              </label>\n              <input\n                type=\"number\"\n                value={formData.targetWeight}\n                onChange={(e) => handleInputChange('targetWeight', parseInt(e.target.value))}\n                className={`w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent ${errors.targetWeight ? 'border-red-500' : 'border-gray-600'} bg-gray-800 text-white placeholder:text-gray-400`}\n                min=\"30\"\n                max=\"300\"\n                required\n              />\n              {errors.targetWeight && (\n                <p className=\"text-red-500 text-xs mt-1 flex items-center\">\n                  <AlertCircle className=\"w-3 h-3 mr-1\" />\n                  Weight must be between 30-300 kg\n                </p>\n              )}\n            </div>\n          </div>\n\n          {/* BMI Calculator */}\n          <BMICalculator \n            height={formData.height} \n            weight={formData.currentWeight}\n            targetWeight={formData.targetWeight}\n          />\n\n          {/* Goals and Preferences */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                Fitness Goal\n              </label>\n              <select\n                value={formData.fitnessGoal}\n                onChange={(e) => handleInputChange('fitnessGoal', e.target.value)}\n                className=\"w-full px-4 py-2 border border-gray-600 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent bg-gray-800 text-white\"\n                required\n              >\n                <option value=\"lose_weight\">Lose Weight</option>\n                <option value=\"gain_weight\">Gain Weight</option>\n                <option value=\"build_muscle\">Build Muscle</option>\n                <option value=\"maintain\">Maintain Current Weight</option>\n              </select>\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                Dietary Preference\n              </label>\n              <select\n                value={formData.dietaryPreference}\n                onChange={(e) => handleInputChange('dietaryPreference', e.target.value)}\n                className=\"w-full px-4 py-2 border border-gray-600 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent bg-gray-800 text-white\"\n                required\n              >\n                <option value=\"vegetarian\">Vegetarian</option>\n                <option value=\"non_vegetarian\">Non-Vegetarian</option>\n                <option value=\"vegan\">Vegan</option>\n                <option value=\"keto\">Keto</option>\n                <option value=\"paleo\">Paleo</option>\n              </select>\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                Sugar Intake Frequency\n              </label>\n              <select\n                value={formData.sugarIntake}\n                onChange={(e) => handleInputChange('sugarIntake', e.target.value)}\n                className=\"w-full px-4 py-2 border border-gray-600 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent bg-gray-800 text-white\"\n                required\n              >\n                <option value=\"low\">Low (Rarely)</option>\n                <option value=\"moderate\">Moderate (Sometimes)</option>\n                <option value=\"high\">High (Frequently)</option>\n              </select>\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                <Droplets className=\"w-4 h-4 inline mr-2\" />\n                Daily Water Intake (glasses)\n              </label>\n              <input\n                type=\"number\"\n                value={formData.waterIntake}\n                onChange={(e) => handleInputChange('waterIntake', parseInt(e.target.value))}\n                className={`w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent ${errors.waterIntake ? 'border-red-500' : 'border-gray-600'} bg-gray-800 text-white placeholder:text-gray-400`}\n                min=\"1\"\n                max=\"20\"\n                required\n              />\n              {errors.waterIntake && (\n                <p className=\"text-red-500 text-xs mt-1 flex items-center\">\n                  <AlertCircle className=\"w-3 h-3 mr-1\" />\n                  Water intake must be between 1-20 glasses\n                </p>\n              )}\n            </div>\n          </div>\n\n          {/* Optional Information */}\n          <div className=\"space-y-6\">\n            <h3 className=\"text-xl font-semibold text-white\">\n              Additional Information (Optional)\n            </h3>\n            \n            <div>\n              <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                <Calendar className=\"w-4 h-4 inline mr-2\" />\n                Upcoming Event\n              </label>\n              <input\n                type=\"text\"\n                value={formData.upcomingEvent}\n                onChange={(e) => handleInputChange('upcomingEvent', e.target.value)}\n                className=\"w-full px-4 py-2 border border-gray-600 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent bg-gray-800 text-white placeholder:text-gray-400\"\n                placeholder=\"e.g., Wedding, Marathon, Beach vacation\"\n              />\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                <Activity className=\"w-4 h-4 inline mr-2\" />\n                Sports Interest\n              </label>\n              <input\n                type=\"text\"\n                value={formData.sportsInterest}\n                onChange={(e) => handleInputChange('sportsInterest', e.target.value)}\n                className=\"w-full px-4 py-2 border border-gray-600 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent bg-gray-800 text-white placeholder:text-gray-400\"\n                placeholder=\"e.g., Running, Swimming, Yoga, Gym\"\n              />\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                Past Fitness Issues\n              </label>\n              <textarea\n                value={formData.pastFitnessIssues}\n                onChange={(e) => handleInputChange('pastFitnessIssues', e.target.value)}\n                className=\"w-full px-4 py-2 border border-gray-600 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent bg-gray-800 text-white placeholder:text-gray-400\"\n                rows={3}\n                placeholder=\"Any past injuries, medical conditions, or dietary restrictions\"\n              />\n            </div>\n          </div>\n\n          <div className=\"flex justify-center pt-6\">\n            <button\n              type=\"submit\"\n              disabled={loading}\n              className=\"bg-gradient-to-r from-purple-500 via-pink-500 to-blue-500 hover:from-purple-600 hover:via-pink-600 hover:to-blue-600 text-white font-semibold text-lg px-12 py-4 rounded-lg transition-all duration-300 transform hover:scale-105 disabled:opacity-50 disabled:cursor-not-allowed disabled:transform-none\"\n            >\n              {loading ? 'Generating Your Plan...' : 'Generate My Diet Plan'}\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default DietForm;","size_bytes":15828},"client/src/components/DietPlan.tsx":{"content":"import React, { useState } from 'react';\nimport { Download, RefreshCw, Calendar, User, Target, Droplets, ChevronDown, ChevronUp } from 'lucide-react';\nimport { DietPlanResponse } from '@/types/diet';\nimport jsPDF from 'jspdf';\n\ninterface DietPlanProps {\n  plan: DietPlanResponse;\n  onNewPlan: () => void;\n}\n\nconst DietPlan: React.FC<DietPlanProps> = ({ plan, onNewPlan }) => {\n  const [expandedSections, setExpandedSections] = useState<Set<string>>(new Set(['summary']));\n\n  const toggleSection = (section: string) => {\n    const newExpanded = new Set(expandedSections);\n    if (newExpanded.has(section)) {\n      newExpanded.delete(section);\n    } else {\n      newExpanded.add(section);\n    }\n    setExpandedSections(newExpanded);\n  };\n\n  const downloadPDF = () => {\n    const pdf = new jsPDF();\n    const pageWidth = pdf.internal.pageSize.getWidth();\n    const margin = 20;\n    let yPosition = margin;\n\n    // Title\n    pdf.setFontSize(20);\n    pdf.setFont('helvetica', 'bold');\n    pdf.text('Personalized Diet Plan', margin, yPosition);\n    yPosition += 15;\n\n    // Date\n    pdf.setFontSize(10);\n    pdf.setFont('helvetica', 'normal');\n    pdf.text(`Generated on: ${new Date(plan.timestamp).toLocaleDateString()}`, margin, yPosition);\n    yPosition += 20;\n\n    // User Info\n    pdf.setFontSize(14);\n    pdf.setFont('helvetica', 'bold');\n    pdf.text('Personal Information', margin, yPosition);\n    yPosition += 10;\n\n    pdf.setFontSize(10);\n    pdf.setFont('helvetica', 'normal');\n    const userInfo = [\n      `Age: ${plan.userData.age} years`,\n      `Height: ${plan.userData.height} cm`,\n      `Current Weight: ${plan.userData.currentWeight} kg`,\n      `Target Weight: ${plan.userData.targetWeight} kg`,\n      `BMI: ${plan.bmiData.bmi.toFixed(1)} (${plan.bmiData.category})`,\n      `Goal: ${plan.userData.fitnessGoal.replace('_', ' ')}`,\n      `Diet Preference: ${plan.userData.dietaryPreference}`,\n    ];\n\n    userInfo.forEach(info => {\n      pdf.text(info, margin, yPosition);\n      yPosition += 6;\n    });\n\n    yPosition += 10;\n\n    // Diet Plan Content\n    pdf.setFontSize(14);\n    pdf.setFont('helvetica', 'bold');\n    pdf.text('Diet Plan', margin, yPosition);\n    yPosition += 10;\n\n    pdf.setFontSize(9);\n    pdf.setFont('helvetica', 'normal');\n    \n    const lines = pdf.splitTextToSize(plan.aiResponse, pageWidth - 2 * margin);\n    lines.forEach((line: string) => {\n      if (yPosition > pdf.internal.pageSize.getHeight() - margin) {\n        pdf.addPage();\n        yPosition = margin;\n      }\n      pdf.text(line, margin, yPosition);\n      yPosition += 5;\n    });\n\n    pdf.save('diet-plan.pdf');\n  };\n\n  const formatAIResponse = (response: string) => {\n    const sections = response.split(/(?=\\*\\*[A-Z][^*]*\\*\\*)/);\n    return sections.filter(section => section.trim());\n  };\n\n  const extractSectionTitle = (section: string) => {\n    const match = section.match(/\\*\\*([^*]+)\\*\\*/);\n    return match ? match[1] : 'Content';\n  };\n\n  const cleanSectionContent = (section: string) => {\n    return section.replace(/\\*\\*[^*]+\\*\\*/, '').trim();\n  };\n\n  const sections = formatAIResponse(plan.aiResponse);\n\n  return (\n    <div className=\"max-w-6xl mx-auto space-y-8 animate-fade-in\">\n      {/* Header */}\n      <div className=\"bg-gradient-to-r from-primary to-primary/80 text-white rounded-lg shadow-lg p-8\">\n        <div className=\"flex flex-col md:flex-row justify-between items-start md:items-center space-y-4 md:space-y-0\">\n          <div>\n            <h1 className=\"text-3xl font-bold mb-2\">Your Personalized Diet Plan</h1>\n            <p className=\"text-lg opacity-90\">\n              Generated on {new Date(plan.timestamp).toLocaleDateString()}\n            </p>\n          </div>\n          <div className=\"flex space-x-4\">\n            <button\n              onClick={downloadPDF}\n              className=\"bg-white text-primary hover:bg-gray-100 font-semibold py-2 px-4 rounded-lg transition-colors duration-200 flex items-center space-x-2\"\n            >\n              <Download className=\"w-4 h-4\" />\n              <span>Download PDF</span>\n            </button>\n            <button\n              onClick={onNewPlan}\n              className=\"bg-white/20 hover:bg-white/30 text-white font-semibold py-2 px-4 rounded-lg transition-colors duration-200 flex items-center space-x-2\"\n            >\n              <RefreshCw className=\"w-4 h-4\" />\n              <span>New Plan</span>\n            </button>\n          </div>\n        </div>\n      </div>\n\n      {/* Summary Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-lg p-6 text-center\">\n          <User className=\"w-8 h-8 text-primary mx-auto mb-3\" />\n          <div className=\"text-2xl font-bold text-gray-900 dark:text-white mb-1\">\n            {plan.bmiData.bmi.toFixed(1)}\n          </div>\n          <div className=\"text-sm text-gray-600 dark:text-gray-400\">\n            BMI ({plan.bmiData.category})\n          </div>\n        </div>\n\n        <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-lg p-6 text-center\">\n          <Target className=\"w-8 h-8 text-green-600 mx-auto mb-3\" />\n          <div className=\"text-2xl font-bold text-gray-900 dark:text-white mb-1\">\n            {Math.abs(plan.userData.currentWeight - plan.userData.targetWeight)} kg\n          </div>\n          <div className=\"text-sm text-gray-600 dark:text-gray-400\">\n            Weight Goal\n          </div>\n        </div>\n\n        <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-lg p-6 text-center\">\n          <Calendar className=\"w-8 h-8 text-blue-600 mx-auto mb-3\" />\n          <div className=\"text-2xl font-bold text-gray-900 dark:text-white mb-1\">\n            {plan.bmiData.estimatedGoalDate}\n          </div>\n          <div className=\"text-sm text-gray-600 dark:text-gray-400\">\n            Target Date\n          </div>\n        </div>\n\n        <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-lg p-6 text-center\">\n          <Droplets className=\"w-8 h-8 text-cyan-600 mx-auto mb-3\" />\n          <div className=\"text-2xl font-bold text-gray-900 dark:text-white mb-1\">\n            {plan.userData.waterIntake}\n          </div>\n          <div className=\"text-sm text-gray-600 dark:text-gray-400\">\n            Glasses/Day\n          </div>\n        </div>\n      </div>\n\n      {/* Diet Plan Content */}\n      <div className=\"space-y-4\">\n        {sections.map((section, index) => {\n          const title = extractSectionTitle(section);\n          const content = cleanSectionContent(section);\n          const sectionKey = `section-${index}`;\n          const isExpanded = expandedSections.has(sectionKey);\n\n          return (\n            <div key={index} className=\"bg-white dark:bg-gray-800 rounded-lg shadow-lg overflow-hidden\">\n              <button\n                onClick={() => toggleSection(sectionKey)}\n                className=\"w-full p-6 text-left hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors duration-200 flex items-center justify-between\"\n              >\n                <h3 className=\"text-xl font-semibold text-gray-900 dark:text-white\">\n                  {title}\n                </h3>\n                {isExpanded ? (\n                  <ChevronUp className=\"w-5 h-5 text-gray-500\" />\n                ) : (\n                  <ChevronDown className=\"w-5 h-5 text-gray-500\" />\n                )}\n              </button>\n              \n              {isExpanded && (\n                <div className=\"px-6 pb-6 border-t border-gray-200 dark:border-gray-700\">\n                  <div className=\"pt-4 prose prose-gray dark:prose-invert max-w-none\">\n                    <pre className=\"whitespace-pre-wrap font-sans text-gray-700 dark:text-gray-300 leading-relaxed\">\n                      {content}\n                    </pre>\n                  </div>\n                </div>\n              )}\n            </div>\n          );\n        })}\n      </div>\n\n      {/* Action Buttons */}\n      <div className=\"flex justify-center space-x-4 pt-8\">\n        <button\n          onClick={downloadPDF}\n          className=\"bg-primary hover:bg-primary/90 text-white font-semibold py-3 px-6 rounded-lg transition-colors flex items-center space-x-2\"\n        >\n          <Download className=\"w-4 h-4\" />\n          <span>Download as PDF</span>\n        </button>\n        <button\n          onClick={onNewPlan}\n          className=\"bg-gray-600 hover:bg-gray-700 text-white font-semibold py-3 px-6 rounded-lg transition-colors flex items-center space-x-2\"\n        >\n          <RefreshCw className=\"w-4 h-4\" />\n          <span>Generate New Plan</span>\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default DietPlan;","size_bytes":8673},"client/src/components/FeaturesSection.tsx":{"content":"import { Brain, Activity, Target } from \"lucide-react\";\n\nconst FeaturesSection = () => {\n  const features = [\n    {\n      icon: <Brain className=\"w-12 h-12 text-purple-400\" />,\n      title: \"Real-time Pose Detection\",\n      description: \"Advanced AI algorithms analyze your posture and movements in real-time, providing instant feedback for optimal form and maximum results.\"\n    },\n    {\n      icon: <Activity className=\"w-12 h-12 text-pink-400\" />,\n      title: \"Smart Workout Planning\", \n      description: \"Personalized exercise routines that adapt to your fitness level, goals, and preferences using machine learning intelligence.\"\n    },\n    {\n      icon: <Target className=\"w-12 h-12 text-blue-400\" />,\n      title: \"Precision Nutrition\",\n      description: \"AI-driven dietary recommendations tailored to your body type, lifestyle, and fitness objectives for optimal nutrition.\"\n    }\n  ];\n\n  return (\n    <section id=\"features-section\" className=\"py-20 bg-black\">\n      <div className=\"container mx-auto px-6\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-5xl md:text-6xl font-bold text-white mb-6\">\n            Powered by\n            <span className=\"block bg-gradient-to-r from-purple-400 via-pink-400 to-blue-400 bg-clip-text text-transparent\">\n              Advanced AI\n            </span>\n          </h2>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8 max-w-6xl mx-auto\">\n          {features.map((feature, index) => (\n            <div \n              key={index}\n              className=\"bg-gradient-to-br from-gray-900 to-gray-800 rounded-2xl p-8 border border-gray-700/50 hover:border-purple-500/50 transition-all duration-300 transform hover:scale-105\"\n            >\n              <div className=\"flex justify-center mb-6\">\n                <div className=\"bg-gradient-to-br from-gray-800 to-gray-700 p-4 rounded-full border border-gray-600\">\n                  {feature.icon}\n                </div>\n              </div>\n              <h3 className=\"text-2xl font-bold text-white mb-4 text-center\">\n                {feature.title}\n              </h3>\n              <p className=\"text-gray-300 text-center leading-relaxed\">\n                {feature.description}\n              </p>\n            </div>\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default FeaturesSection;","size_bytes":2369},"client/src/components/FinalCTA.tsx":{"content":"interface FinalCTAProps {\n  onBeginTraining: () => void;\n}\n\nconst FinalCTA = ({ onBeginTraining }: FinalCTAProps) => {\n  return (\n    <section className=\"py-32 bg-gradient-to-br from-gray-900 via-black to-gray-800\">\n      <div className=\"container mx-auto px-6 text-center\">\n        <h2 className=\"text-5xl md:text-7xl font-bold text-white mb-8\">\n          Ready to Experience\n          <span className=\"block bg-gradient-to-r from-purple-400 via-pink-400 to-blue-400 bg-clip-text text-transparent\">\n            AI Fitness?\n          </span>\n        </h2>\n        \n        <p className=\"text-xl text-gray-300 mb-12 max-w-2xl mx-auto\">\n          Join thousands of users who have transformed their fitness journey with our AI-powered platform.\n        </p>\n\n        <button\n          onClick={onBeginTraining}\n          className=\"bg-gradient-to-r from-purple-500 via-pink-500 to-blue-500 hover:from-purple-600 hover:via-pink-600 hover:to-blue-600 text-white font-bold py-6 px-12 rounded-lg text-xl transition-all duration-300 transform hover:scale-105 shadow-2xl\"\n        >\n          Begin AI Training\n        </button>\n      </div>\n    </section>\n  );\n};\n\nexport default FinalCTA;","size_bytes":1180},"client/src/components/Footer.tsx":{"content":"import { Brain } from \"lucide-react\";\n\nconst Footer = () => {\n  return (\n    <footer className=\"bg-black border-t border-gray-800\">\n      <div className=\"container mx-auto px-6 py-8\">\n        <div className=\"flex flex-col md:flex-row justify-between items-center\">\n          <div className=\"flex items-center space-x-2 mb-4 md:mb-0\">\n            <div className=\"text-xl font-bold bg-gradient-to-r from-purple-400 via-pink-400 to-blue-400 bg-clip-text text-transparent\">\n              FitnessAI\n            </div>\n            <div className=\"text-gray-400\">•</div>\n            <span className=\"text-gray-400 text-sm\">© 2024 All rights reserved</span>\n          </div>\n          \n          <div className=\"flex items-center space-x-2 text-gray-400 text-sm\">\n            <Brain className=\"h-4 w-4\" />\n            <span>Powered by Advanced AI</span>\n          </div>\n        </div>\n      </div>\n    </footer>\n  );\n};\n\nexport default Footer;","size_bytes":939},"client/src/components/HeroSection.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { ArrowDown } from \"lucide-react\";\n\ninterface HeroSectionProps {\n  onStartWorkout: () => void;\n  onExploreModels: () => void;\n}\n\nconst HeroSection = ({ onStartWorkout, onExploreModels }: HeroSectionProps) => {\n  const scrollToFeatures = () => {\n    const featuresSection = document.getElementById(\"features-section\");\n    featuresSection?.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  return (\n    <section className=\"relative min-h-screen flex items-center justify-center overflow-hidden bg-gradient-to-br from-gray-900 via-black to-gray-800\">\n      {/* Gradient Overlay */}\n      <div className=\"absolute inset-0 bg-gradient-to-br from-purple-900/30 via-blue-900/20 to-pink-900/30\" />\n\n      {/* Content */}\n      <div className=\"relative z-10 text-center px-6 max-w-5xl mx-auto\">\n        <h1 className=\"text-6xl md:text-8xl font-bold text-white mb-8 leading-tight\">\n          Transform Your\n          <span className=\"block bg-gradient-to-r from-purple-400 via-pink-400 to-blue-400 bg-clip-text text-transparent\">\n            Fitness Journey\n          </span>\n        </h1>\n        \n        <p className=\"text-xl md:text-2xl text-gray-300 mb-12 max-w-3xl mx-auto leading-relaxed\">\n          Unlock your potential with AI-powered body analysis and personalized nutrition plans. \n          Get started with our advanced fitness intelligence platform.\n        </p>\n\n        <div className=\"flex flex-col sm:flex-row gap-6 justify-center items-center\">\n          <button\n            onClick={onStartWorkout}\n            className=\"bg-gradient-to-r from-purple-500 via-pink-500 to-blue-500 hover:from-purple-600 hover:via-pink-600 hover:to-blue-600 text-white font-semibold py-4 px-8 rounded-lg text-lg transition-all duration-300 transform hover:scale-105 shadow-lg\"\n          >\n            Start AI Workout\n          </button>\n          <button\n            onClick={onExploreModels}\n            className=\"bg-transparent border-2 border-white text-white hover:bg-white hover:text-black font-semibold py-4 px-8 rounded-lg text-lg transition-all duration-300 transform hover:scale-105\"\n          >\n            Explore AI Models\n          </button>\n        </div>\n      </div>\n\n      {/* Scroll Indicator */}\n      <div \n        className=\"absolute bottom-8 left-1/2 transform -translate-x-1/2 animate-bounce cursor-pointer\"\n        onClick={scrollToFeatures}\n      >\n        <ArrowDown className=\"h-6 w-6 text-white/70\" />\n      </div>\n    </section>\n  );\n};\n\nexport default HeroSection;","size_bytes":2543},"client/src/components/ImageUpload.tsx":{"content":"import { useState, useCallback } from \"react\";\nimport { useDropzone } from \"react-dropzone\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { Upload, Image as ImageIcon, Loader2 } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface ImageUploadProps {\n  onImageUpload: (file: File) => void;\n  isProcessing: boolean;\n}\n\nconst ImageUpload = ({ onImageUpload, isProcessing }: ImageUploadProps) => {\n  const [preview, setPreview] = useState<string | null>(null);\n\n  const onDrop = useCallback((acceptedFiles: File[]) => {\n    const file = acceptedFiles[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onload = () => {\n        setPreview(reader.result as string);\n      };\n      reader.readAsDataURL(file);\n      onImageUpload(file);\n    }\n  }, [onImageUpload]);\n\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\n    onDrop,\n    accept: {\n      'image/*': ['.jpeg', '.jpg', '.png', '.webp']\n    },\n    multiple: false\n  });\n\n  return (\n    <section id=\"upload-section\" className=\"py-20 px-6\">\n      <div className=\"max-w-4xl mx-auto text-center\">\n        <h2 className=\"text-4xl md:text-5xl font-bold mb-6 text-white\">\n          Upload Your Photo\n        </h2>\n        <p className=\"text-xl text-gray-300 mb-12 max-w-2xl mx-auto\">\n          Our AI will analyze your body type in seconds and provide personalized recommendations\n        </p>\n\n        <div className=\"p-8 max-w-2xl mx-auto bg-gradient-to-br from-gray-900 to-gray-800 rounded-2xl border border-gray-700/50 shadow-2xl hover:border-purple-500/50 transition-all duration-300\">\n          <div\n            {...getRootProps()}\n            className={cn(\n              \"border-2 border-dashed rounded-lg p-12 cursor-pointer transition-all duration-300 hover:scale-[1.02]\",\n              isDragActive\n                ? \"border-purple-400 bg-purple-500/10 shadow-inner\"\n                : \"border-gray-600 hover:border-purple-500/50 hover:bg-purple-500/5\",\n              isProcessing && \"pointer-events-none opacity-50\"\n            )}\n          >\n            <input {...getInputProps()} />\n            \n            {preview ? (\n              <div className=\"space-y-6\">\n                <img\n                  src={preview}\n                  alt=\"Preview\"\n                  className=\"max-w-full h-64 object-cover rounded-lg mx-auto shadow-medium\"\n                />\n                {isProcessing ? (\n                  <div className=\"flex items-center justify-center gap-2 text-purple-400\">\n                    <Loader2 className=\"h-6 w-6 animate-spin\" />\n                    <span className=\"text-lg font-medium text-white\">Analyzing your body type...</span>\n                  </div>\n                ) : (\n                  <p className=\"text-gray-400\">\n                    Click to upload a different image or wait for results\n                  </p>\n                )}\n              </div>\n            ) : (\n              <div className=\"text-center space-y-4\">\n                <div className=\"mx-auto w-16 h-16 bg-gradient-to-br from-purple-500 via-pink-500 to-blue-500 rounded-full flex items-center justify-center\">\n                  {isDragActive ? (\n                    <ImageIcon className=\"h-8 w-8 text-white\" />\n                  ) : (\n                    <Upload className=\"h-8 w-8 text-white\" />\n                  )}\n                </div>\n                \n                <div>\n                  <p className=\"text-xl font-semibold text-white mb-2\">\n                    {isDragActive ? \"Drop your image here\" : \"Upload your photo\"}\n                  </p>\n                  <p className=\"text-gray-400\">\n                    Drag & drop or click to select • JPEG, PNG, WebP • Max 10MB\n                  </p>\n                </div>\n                \n                <button className=\"bg-gray-700 hover:bg-gray-600 text-white font-semibold py-2 px-6 rounded-lg transition-colors mt-4\">\n                  Choose File\n                </button>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default ImageUpload;","size_bytes":4148},"client/src/components/LoadingSpinner.tsx":{"content":"import React from 'react';\nimport { Loader2 } from 'lucide-react';\n\nconst LoadingSpinner: React.FC = () => {\n  return (\n    <div className=\"flex flex-col items-center justify-center py-12\">\n      <Loader2 className=\"w-12 h-12 text-primary animate-spin mb-4\" />\n      <p className=\"text-lg text-gray-600 dark:text-gray-400 mb-2\">\n        Generating your personalized plan...\n      </p>\n      <p className=\"text-sm text-gray-500 dark:text-gray-500 text-center max-w-md\">\n        Our AI is analyzing your information to create the perfect diet and fitness recommendations for you.\n      </p>\n    </div>\n  );\n};\n\nexport default LoadingSpinner;","size_bytes":639},"client/src/components/Navbar.tsx":{"content":"import { useState } from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { Button } from '@/components/ui/button';\nimport { Avatar, AvatarFallback } from '@/components/ui/avatar';\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from '@/components/ui/dropdown-menu';\nimport { useAuth } from '@/hooks/useAuth';\nimport { LogOut, User, Settings, Menu, X } from 'lucide-react';\n\nconst Navbar = () => {\n  const { user, signOut } = useAuth();\n  const navigate = useNavigate();\n  const [isOpen, setIsOpen] = useState(false);\n\n  const handleSignOut = async () => {\n    await signOut();\n    navigate('/auth');\n  };\n\n  const getInitials = (email: string | undefined) => {\n    if (!email) return 'U';\n    const name = email.split('@')[0];\n    return name.charAt(0).toUpperCase();\n  };\n\n  const getDisplayName = (email: string | undefined) => {\n    if (!email) return 'User';\n    const username = email.split('@')[0];\n    return username.charAt(0).toUpperCase() + '. ' + username.slice(1);\n  };\n\n  return (\n    <nav className=\"fixed top-0 left-0 right-0 z-50 bg-black/90 backdrop-blur-lg border-b border-gray-800\">\n      <div className=\"container mx-auto px-6 h-16 flex items-center justify-between\">\n        <Link to=\"/\" className=\"flex items-center space-x-2\">\n          <div className=\"text-2xl font-bold bg-gradient-to-r from-purple-400 via-pink-400 to-blue-400 bg-clip-text text-transparent\">\n            FitnessAI\n          </div>\n        </Link>\n\n        {/* Desktop Navigation */}\n        <div className=\"hidden md:flex items-center space-x-8\">\n          <Link to=\"/\" className=\"text-white hover:text-purple-400 transition-colors font-medium\">\n            Home\n          </Link>\n          <Link to=\"/ai-models\" className=\"text-white hover:text-purple-400 transition-colors font-medium\">\n            AI Models\n          </Link>\n          <Link to=\"/workout\" className=\"text-white hover:text-purple-400 transition-colors font-medium\">\n            Workout\n          </Link>\n          \n          {user ? (\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button variant=\"ghost\" className=\"flex items-center space-x-2 px-3 text-white hover:text-purple-400\">\n                  <Avatar className=\"h-8 w-8 bg-gradient-to-r from-purple-500 to-pink-500 text-white\">\n                    <AvatarFallback className=\"text-sm bg-gradient-to-r from-purple-500 to-pink-500\">\n                      {getInitials(user.email)}\n                    </AvatarFallback>\n                  </Avatar>\n                  <span className=\"hidden sm:block font-medium\">\n                    {getDisplayName(user.email)}\n                  </span>\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent align=\"end\" className=\"w-56 bg-gray-900 border-gray-700\">\n                <DropdownMenuItem asChild>\n                  <Link to=\"/dashboard\" className=\"flex items-center space-x-2 text-white hover:text-purple-400\">\n                    <User className=\"h-4 w-4\" />\n                    <span>Dashboard</span>\n                  </Link>\n                </DropdownMenuItem>\n                <DropdownMenuItem className=\"flex items-center space-x-2 text-white hover:text-purple-400\">\n                  <Settings className=\"h-4 w-4\" />\n                  <span>Settings</span>\n                </DropdownMenuItem>\n                <DropdownMenuItem \n                  onClick={handleSignOut}\n                  className=\"flex items-center space-x-2 text-red-400 hover:text-red-300\"\n                >\n                  <LogOut className=\"h-4 w-4\" />\n                  <span>Sign Out</span>\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n          ) : (\n            <button className=\"bg-gradient-to-r from-purple-500 via-pink-500 to-blue-500 hover:from-purple-600 hover:via-pink-600 hover:to-blue-600 text-white font-semibold py-2 px-6 rounded-lg transition-all duration-300\">\n              <Link to=\"/auth\">Get Started</Link>\n            </button>\n          )}\n        </div>\n\n        {/* Mobile menu button */}\n        <button\n          className=\"md:hidden text-white\"\n          onClick={() => setIsOpen(!isOpen)}\n        >\n          {isOpen ? <X className=\"h-6 w-6\" /> : <Menu className=\"h-6 w-6\" />}\n        </button>\n      </div>\n\n      {/* Mobile Navigation */}\n      {isOpen && (\n        <div className=\"md:hidden bg-black/95 border-t border-gray-800\">\n          <div className=\"px-6 py-4 space-y-4\">\n            <Link to=\"/\" className=\"block text-white hover:text-purple-400 transition-colors font-medium\">\n              Home\n            </Link>\n            <Link to=\"/ai-models\" className=\"block text-white hover:text-purple-400 transition-colors font-medium\">\n              AI Models\n            </Link>\n            <Link to=\"/workout\" className=\"block text-white hover:text-purple-400 transition-colors font-medium\">\n              Workout\n            </Link>\n            {!user && (\n              <Link to=\"/auth\" className=\"block bg-gradient-to-r from-purple-500 via-pink-500 to-blue-500 text-white font-semibold py-2 px-6 rounded-lg text-center\">\n                Get Started\n              </Link>\n            )}\n          </div>\n        </div>\n      )}\n    </nav>\n  );\n};\n\nexport default Navbar;","size_bytes":5353},"client/src/components/ProtectedRoute.tsx":{"content":"import { ReactNode } from 'react';\nimport { Navigate } from 'react-router-dom';\nimport { useAuth } from '@/hooks/useAuth';\n\ninterface ProtectedRouteProps {\n  children: ReactNode;\n}\n\nconst ProtectedRoute = ({ children }: ProtectedRouteProps) => {\n  const { user, loading } = useAuth();\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  if (!user) {\n    return <Navigate to=\"/auth\" replace />;\n  }\n\n  return <>{children}</>;\n};\n\nexport default ProtectedRoute;","size_bytes":629},"client/src/components/WorkoutRecommendations.tsx":{"content":"import { Dumbbell, Zap, Target, User } from \"lucide-react\";\n\ninterface WorkoutRecommendationsProps {\n  selectedBodyType?: 'Ectomorph' | 'Mesomorph' | 'Endomorph' | null;\n}\n\nconst WorkoutRecommendations = ({ selectedBodyType }: WorkoutRecommendationsProps) => {\n  const workoutPlans = [\n    {\n      bodyType: 'Ectomorph',\n      title: 'Muscle Building Focus',\n      description: 'Heavy lifting with longer rest periods to maximize muscle growth',\n      focus: 'Bulk & Strength',\n      exercises: [\n        'Compound lifts (squats, deadlifts)',\n        'Progressive overload training',\n        'Minimal cardio, focus on weights'\n      ],\n      color: 'from-accent to-accent/70',\n      icon: Zap,\n      recommended: selectedBodyType === 'Ectomorph'\n    },\n    {\n      bodyType: 'Mesomorph',\n      title: 'Balanced Training',\n      description: 'Mix of strength training and cardio for optimal body composition',\n      focus: 'Athletic Performance',\n      exercises: [\n        'Strength training 4-5x/week',\n        'HIIT cardio sessions',\n        'Functional movement patterns'\n      ],\n      color: 'from-primary to-primary-glow',\n      icon: Target,\n      recommended: selectedBodyType === 'Mesomorph'\n    },\n    {\n      bodyType: 'Endomorph',\n      title: 'Fat Loss Priority',\n      description: 'High-intensity workouts combined with metabolic training',\n      focus: 'Lean & Tone',\n      exercises: [\n        'Circuit training',\n        'Cardio 5-6x/week',\n        'High-rep strength training'\n      ],\n      color: 'from-secondary to-secondary/70',\n      icon: User,\n      recommended: selectedBodyType === 'Endomorph'\n    }\n  ];\n\n  return (\n    <section className=\"py-20 px-6\">\n      <div className=\"max-w-6xl mx-auto\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-4xl md:text-5xl font-bold mb-6 text-white\">\n            Personalized Workout Plans\n          </h2>\n          <p className=\"text-xl text-gray-300 max-w-3xl mx-auto\">\n            Each body type responds differently to exercise. Choose the plan that matches your natural physique for optimal results.\n          </p>\n        </div>\n\n        <div className=\"grid md:grid-cols-3 gap-8\">\n          {workoutPlans.map((plan) => {\n            const IconComponent = plan.icon;\n            return (\n              <div\n                key={plan.bodyType}\n                className={`p-6 relative overflow-hidden transition-all duration-500 hover:scale-105 bg-gradient-to-br from-gray-900 to-gray-800 rounded-2xl border ${\n                  plan.recommended \n                    ? 'border-purple-500/50 shadow-2xl shadow-purple-500/20' \n                    : 'border-gray-700/50 shadow-xl hover:border-purple-500/30'\n                }`}\n              >\n                {plan.recommended && (\n                  <div className=\"absolute top-4 right-4 bg-gradient-to-r from-purple-500 to-pink-500 text-white px-3 py-1 rounded-full text-sm font-medium\">\n                    Recommended for You\n                  </div>\n                )}\n\n                <div className=\"space-y-6\">\n                  {/* Icon and Header */}\n                  <div className=\"text-center\">\n                    <div className={`mx-auto w-16 h-16 bg-gradient-to-br ${plan.color} rounded-full flex items-center justify-center shadow-lg mb-4`}>\n                      <IconComponent className=\"h-8 w-8 text-white\" />\n                    </div>\n                    <h3 className=\"text-2xl font-bold text-white mb-2\">\n                      {plan.bodyType}\n                    </h3>\n                    <div className=\"bg-gray-700 border border-gray-600 text-gray-300 px-3 py-1 rounded-full text-sm\">\n                      {plan.focus}\n                    </div>\n                  </div>\n\n                  {/* Description */}\n                  <div>\n                    <h4 className=\"font-semibold text-white mb-2\">\n                      {plan.title}\n                    </h4>\n                    <p className=\"text-gray-300 text-sm\">\n                      {plan.description}\n                    </p>\n                  </div>\n\n                  {/* Exercise List */}\n                  <div className=\"bg-gray-800/50 p-4 rounded-lg border border-gray-700\">\n                    <h5 className=\"font-medium text-white mb-3 text-sm\">Key Training Elements:</h5>\n                    <ul className=\"space-y-2\">\n                      {plan.exercises.map((exercise, index) => (\n                        <li key={index} className=\"text-gray-300 text-sm flex items-start gap-2\">\n                          <Dumbbell className=\"h-3 w-3 mt-1 flex-shrink-0 text-cyan-400\" />\n                          {exercise}\n                        </li>\n                      ))}\n                    </ul>\n                  </div>\n\n                  {/* Action Button */}\n                  <button \n                    className={`w-full py-3 px-6 rounded-lg font-semibold transition-all duration-300 transform hover:scale-105 ${\n                      plan.recommended \n                        ? 'bg-gradient-to-r from-purple-500 via-pink-500 to-blue-500 hover:from-purple-600 hover:via-pink-600 hover:to-blue-600 text-white' \n                        : 'bg-gray-700 hover:bg-gray-600 text-white border border-gray-600'\n                    }`}\n                  >\n                    Get {plan.bodyType} Plan\n                  </button>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default WorkoutRecommendations;","size_bytes":5527},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.tsx":{"content":"import { createContext, useContext, useState, ReactNode } from 'react';\n\ninterface User {\n  id: string;\n  email?: string;\n  user_metadata?: {\n    full_name?: string;\n  };\n}\n\ninterface AuthContextType {\n  user: User | null;\n  loading: boolean;\n  signOut: () => Promise<void>;\n  signIn: (email: string, password: string) => Promise<{ error?: string }>;\n  signUp: (email: string, password: string, fullName?: string) => Promise<{ error?: string }>;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\nexport const AuthProvider = ({ children }: AuthProviderProps) => {\n  const [user, setUser] = useState<User | null>(() => {\n    // Check if user is stored in localStorage\n    const stored = localStorage.getItem('auth_user');\n    return stored ? JSON.parse(stored) : null;\n  });\n  const [loading, setLoading] = useState(false);\n\n  const signIn = async (email: string, password: string) => {\n    setLoading(true);\n    \n    // Mock authentication - in production, replace with your backend API\n    if (email && password) {\n      const mockUser: User = {\n        id: Math.random().toString(36).substr(2, 9),\n        email,\n        user_metadata: {}\n      };\n      \n      setUser(mockUser);\n      localStorage.setItem('auth_user', JSON.stringify(mockUser));\n      setLoading(false);\n      return {};\n    }\n    \n    setLoading(false);\n    return { error: 'Invalid credentials' };\n  };\n\n  const signUp = async (email: string, password: string, fullName?: string) => {\n    setLoading(true);\n    \n    // Mock registration - in production, replace with your backend API\n    if (email && password) {\n      const mockUser: User = {\n        id: Math.random().toString(36).substr(2, 9),\n        email,\n        user_metadata: {\n          full_name: fullName\n        }\n      };\n      \n      setUser(mockUser);\n      localStorage.setItem('auth_user', JSON.stringify(mockUser));\n      setLoading(false);\n      return {};\n    }\n    \n    setLoading(false);\n    return { error: 'Registration failed' };\n  };\n\n  const signOut = async () => {\n    setUser(null);\n    localStorage.removeItem('auth_user');\n  };\n\n  return (\n    <AuthContext.Provider value={{ user, loading, signOut, signIn, signUp }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};","size_bytes":2507},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/AIModels.tsx":{"content":"import { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport Navbar from \"@/components/Navbar\";\nimport Footer from \"@/components/Footer\";\nimport { Camera, Utensils, Dumbbell } from \"lucide-react\";\n\nconst AIModels = () => {\n  const navigate = useNavigate();\n\n  const models = [\n    {\n      id: \"body-type\",\n      icon: <Camera className=\"w-16 h-16 text-purple-400\" />,\n      title: \"AI Body Type Analyzer\",\n      description: \"Advanced computer vision technology to classify your body type\",\n      features: [\n        \"Instant photo analysis\",\n        \"99% accuracy rate\", \n        \"Ectomorph/Mesomorph/Endomorph classification\",\n        \"Personalized workout recommendations\",\n        \"Real-time results\"\n      ],\n      buttonText: \"Body Type Analysis\",\n      available: true,\n      gradient: \"from-purple-500 to-pink-500\"\n    },\n    {\n      id: \"diet-plan\",\n      icon: <Utensils className=\"w-16 h-16 text-blue-400\" />,\n      title: \"AI Diet Planner\", \n      description: \"Intelligent nutrition planning based on your goals and preferences\",\n      features: [\n        \"Custom meal planning\",\n        \"BMI calculation & tracking\",\n        \"Dietary preference matching\",\n        \"Calorie optimization\",\n        \"Progress monitoring\"\n      ],\n      buttonText: \"Generate Diet Plan\",\n      available: true,\n      gradient: \"from-blue-500 to-cyan-500\"\n    },\n    {\n      id: \"workout-trainer\",\n      icon: <Dumbbell className=\"w-16 h-16 text-green-400\" />,\n      title: \"AI Workout Trainer\",\n      description: \"Personalized training programs with real-time form correction\",\n      features: [\n        \"Real-time pose detection\",\n        \"Form correction feedback\",\n        \"Adaptive workout plans\",\n        \"Progress tracking\",\n        \"Voice coaching\"\n      ],\n      buttonText: \"Coming Soon\",\n      available: false,\n      gradient: \"from-green-500 to-teal-500\"\n    }\n  ];\n\n  const handleModelSelect = (modelId: string) => {\n    if (modelId === \"body-type\" || modelId === \"diet-plan\") {\n      navigate(`/?model=${modelId}`);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-black\">\n      <Navbar />\n      \n      <div className=\"pt-24 pb-16\">\n        <div className=\"container mx-auto px-6\">\n          {/* Header */}\n          <div className=\"text-center mb-16\">\n            <h1 className=\"text-5xl md:text-7xl font-bold text-white mb-6\">\n              Choose Your\n              <span className=\"block bg-gradient-to-r from-purple-400 via-pink-400 to-blue-400 bg-clip-text text-transparent\">\n                AI Model\n              </span>\n            </h1>\n            <p className=\"text-xl text-gray-300 max-w-3xl mx-auto\">\n              Select the AI model that best fits your fitness goals and start your personalized journey today.\n            </p>\n          </div>\n\n          {/* Models Grid */}\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8 max-w-7xl mx-auto\">\n            {models.map((model) => (\n              <div \n                key={model.id}\n                className=\"bg-gradient-to-br from-gray-900 to-gray-800 rounded-2xl p-8 border border-gray-700/50 hover:border-purple-500/50 transition-all duration-300 transform hover:scale-105\"\n              >\n                {/* Icon */}\n                <div className=\"flex justify-center mb-6\">\n                  <div className=\"bg-gradient-to-br from-gray-800 to-gray-700 p-6 rounded-full border border-gray-600\">\n                    {model.icon}\n                  </div>\n                </div>\n\n                {/* Title & Description */}\n                <h3 className=\"text-2xl font-bold text-white mb-4 text-center\">\n                  {model.title}\n                </h3>\n                <p className=\"text-gray-300 text-center mb-8 leading-relaxed\">\n                  {model.description}\n                </p>\n\n                {/* Features */}\n                <div className=\"space-y-3 mb-8\">\n                  {model.features.map((feature, index) => (\n                    <div key={index} className=\"flex items-center\">\n                      <div className=\"w-2 h-2 bg-gradient-to-r from-purple-400 to-pink-400 rounded-full mr-3\" />\n                      <span className=\"text-gray-300 text-sm\">{feature}</span>\n                    </div>\n                  ))}\n                </div>\n\n                {/* Button */}\n                <button\n                  onClick={() => handleModelSelect(model.id)}\n                  disabled={!model.available}\n                  className={`w-full py-4 px-6 rounded-lg font-semibold text-white transition-all duration-300 transform hover:scale-105 ${\n                    model.available \n                      ? `bg-gradient-to-r ${model.gradient} hover:shadow-lg` \n                      : 'bg-gray-600 cursor-not-allowed opacity-50'\n                  }`}\n                >\n                  {model.buttonText}\n                </button>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n\n      <Footer />\n    </div>\n  );\n};\n\nexport default AIModels;","size_bytes":5035},"client/src/pages/Auth.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\n\nimport { useToast } from '@/hooks/use-toast';\nimport { useAuth } from '@/hooks/useAuth';\nimport { Eye, EyeOff, Github } from 'lucide-react';\nimport { FcGoogle } from 'react-icons/fc';\n\nconst Auth = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [showPassword, setShowPassword] = useState(false);\n  const [loginData, setLoginData] = useState({ email: '', password: '' });\n  const [signupData, setSignupData] = useState({ \n    fullName: '', \n    email: '', \n    password: '', \n    confirmPassword: '' \n  });\n  \n  const { toast } = useToast();\n  const { user, signIn, signUp } = useAuth();\n  const navigate = useNavigate();\n\n  // Redirect if already authenticated\n  useEffect(() => {\n    if (user) {\n      navigate('/dashboard');\n    }\n  }, [user, navigate]);\n\n  const handleLogin = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    try {\n      const { error } = await signIn(loginData.email, loginData.password);\n\n      if (error) {\n        toast({\n          variant: \"destructive\",\n          title: \"Login Failed\",\n          description: error,\n        });\n      } else {\n        toast({\n          title: \"Welcome back!\",\n          description: \"You have been successfully logged in.\",\n        });\n        navigate('/dashboard');\n      }\n    } catch (error) {\n      toast({\n        variant: \"destructive\",\n        title: \"Login Failed\",\n        description: \"An unexpected error occurred.\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleSignup = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (signupData.password !== signupData.confirmPassword) {\n      toast({\n        variant: \"destructive\",\n        title: \"Password Mismatch\",\n        description: \"Passwords do not match. Please try again.\",\n      });\n      return;\n    }\n\n    if (signupData.password.length < 6) {\n      toast({\n        variant: \"destructive\",\n        title: \"Password Too Short\",\n        description: \"Password must be at least 6 characters long.\",\n      });\n      return;\n    }\n\n    setIsLoading(true);\n\n    try {\n      const { error } = await signUp(signupData.email, signupData.password, signupData.fullName);\n\n      if (error) {\n        toast({\n          variant: \"destructive\",\n          title: \"Registration Failed\",\n          description: error,\n        });\n      } else {\n        toast({\n          title: \"Registration Successful!\",\n          description: \"You have been successfully registered and logged in.\",\n        });\n        navigate('/dashboard');\n      }\n    } catch (error) {\n      toast({\n        variant: \"destructive\",\n        title: \"Registration Failed\",\n        description: \"An unexpected error occurred.\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleSocialLogin = async (provider: 'google' | 'github') => {\n    // Mock social login - in production, replace with your backend API\n    toast({\n      title: \"Social Login\",\n      description: `${provider} login would be handled by your backend API.`,\n    });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-black flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-md\">\n        <Card className=\"shadow-2xl border border-gray-700/50 bg-gradient-to-br from-gray-900 to-gray-800 backdrop-blur\">\n          <CardHeader className=\"text-center space-y-2\">\n            <CardTitle className=\"text-3xl font-bold bg-gradient-to-r from-purple-400 via-pink-400 to-blue-400 bg-clip-text text-transparent\">\n              FitnessAI\n            </CardTitle>\n            <CardDescription className=\"text-gray-300\">\n              Join the fitness revolution. Discover your body type and train smarter.\n            </CardDescription>\n          </CardHeader>\n\n          <CardContent>\n            <Tabs defaultValue=\"login\" className=\"space-y-4\">\n              <TabsList className=\"grid w-full grid-cols-2 bg-gray-800 border-gray-600\">\n                <TabsTrigger value=\"login\" className=\"text-gray-300 data-[state=active]:bg-gray-700 data-[state=active]:text-white\">Login</TabsTrigger>\n                <TabsTrigger value=\"signup\" className=\"text-gray-300 data-[state=active]:bg-gray-700 data-[state=active]:text-white\">Sign Up</TabsTrigger>\n              </TabsList>\n\n              <TabsContent value=\"login\" className=\"space-y-4\">\n                <form onSubmit={handleLogin} className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"email\" className=\"text-gray-300\">Email</Label>\n                    <Input\n                      id=\"email\"\n                      type=\"email\"\n                      placeholder=\"Enter your email\"\n                      value={loginData.email}\n                      onChange={(e) => setLoginData(prev => ({ ...prev, email: e.target.value }))}\n                      required\n                      className=\"bg-gray-800 border-gray-600 text-white placeholder:text-gray-400 focus:border-purple-500\"\n                    />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"password\" className=\"text-gray-300\">Password</Label>\n                    <div className=\"relative\">\n                      <Input\n                        id=\"password\"\n                        type={showPassword ? \"text\" : \"password\"}\n                        placeholder=\"Enter your password\"\n                        value={loginData.password}\n                        onChange={(e) => setLoginData(prev => ({ ...prev, password: e.target.value }))}\n                        required\n                        className=\"bg-gray-800 border-gray-600 text-white placeholder:text-gray-400 focus:border-purple-500\"\n                      />\n                      <Button\n                        type=\"button\"\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        className=\"absolute right-2 top-1/2 -translate-y-1/2 h-auto p-1 text-gray-400 hover:text-white\"\n                        onClick={() => setShowPassword(!showPassword)}\n                      >\n                        {showPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                      </Button>\n                    </div>\n                  </div>\n\n                  <button \n                    type=\"submit\" \n                    className=\"w-full bg-gradient-to-r from-purple-500 via-pink-500 to-blue-500 hover:from-purple-600 hover:via-pink-600 hover:to-blue-600 text-white font-semibold py-3 px-6 rounded-lg transition-all duration-300 transform hover:scale-105 disabled:opacity-50 disabled:transform-none\" \n                    disabled={isLoading}\n                  >\n                    {isLoading ? \"Signing in...\" : \"Sign In\"}\n                  </button>\n                </form>\n              </TabsContent>\n\n              <TabsContent value=\"signup\" className=\"space-y-4\">\n                <form onSubmit={handleSignup} className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"fullName\" className=\"text-gray-300\">Full Name</Label>\n                    <Input\n                      id=\"fullName\"\n                      placeholder=\"Enter your full name\"\n                      value={signupData.fullName}\n                      onChange={(e) => setSignupData(prev => ({ ...prev, fullName: e.target.value }))}\n                      required\n                      className=\"bg-gray-800 border-gray-600 text-white placeholder:text-gray-400 focus:border-purple-500\"\n                    />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"signupEmail\" className=\"text-gray-300\">Email</Label>\n                    <Input\n                      id=\"signupEmail\"\n                      type=\"email\"\n                      placeholder=\"Enter your email\"\n                      value={signupData.email}\n                      onChange={(e) => setSignupData(prev => ({ ...prev, email: e.target.value }))}\n                      required\n                      className=\"bg-gray-800 border-gray-600 text-white placeholder:text-gray-400 focus:border-purple-500\"\n                    />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"signupPassword\" className=\"text-gray-300\">Password</Label>\n                    <Input\n                      id=\"signupPassword\"\n                      type=\"password\"\n                      placeholder=\"Create a password\"\n                      value={signupData.password}\n                      onChange={(e) => setSignupData(prev => ({ ...prev, password: e.target.value }))}\n                      required\n                      className=\"bg-gray-800 border-gray-600 text-white placeholder:text-gray-400 focus:border-purple-500\"\n                    />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"confirmPassword\" className=\"text-gray-300\">Confirm Password</Label>\n                    <Input\n                      id=\"confirmPassword\"\n                      type=\"password\"\n                      placeholder=\"Confirm your password\"\n                      value={signupData.confirmPassword}\n                      onChange={(e) => setSignupData(prev => ({ ...prev, confirmPassword: e.target.value }))}\n                      required\n                      className=\"bg-gray-800 border-gray-600 text-white placeholder:text-gray-400 focus:border-purple-500\"\n                    />\n                  </div>\n\n                  <button \n                    type=\"submit\" \n                    className=\"w-full bg-gradient-to-r from-purple-500 via-pink-500 to-blue-500 hover:from-purple-600 hover:via-pink-600 hover:to-blue-600 text-white font-semibold py-3 px-6 rounded-lg transition-all duration-300 transform hover:scale-105 disabled:opacity-50 disabled:transform-none\" \n                    disabled={isLoading}\n                  >\n                    {isLoading ? \"Creating account...\" : \"Create Account\"}\n                  </button>\n                </form>\n              </TabsContent>\n            </Tabs>\n\n            <div className=\"mt-6\">\n              <div className=\"relative\">\n                <div className=\"absolute inset-0 flex items-center\">\n                  <span className=\"w-full border-t border-gray-600\" />\n                </div>\n                <div className=\"relative flex justify-center text-xs uppercase\">\n                  <span className=\"bg-gray-800 px-2 text-gray-400\">Or continue with</span>\n                </div>\n              </div>\n\n              <div className=\"mt-4 grid grid-cols-2 gap-3\">\n                <button\n                  onClick={() => handleSocialLogin('google')}\n                  className=\"w-full bg-gray-800 hover:bg-gray-700 border border-gray-600 text-white py-2 px-4 rounded-lg transition-colors flex items-center justify-center\"\n                >\n                  <FcGoogle className=\"mr-2 h-4 w-4\" />\n                  Google\n                </button>\n                <button\n                  onClick={() => handleSocialLogin('github')}\n                  className=\"w-full bg-gray-800 hover:bg-gray-700 border border-gray-600 text-white py-2 px-4 rounded-lg transition-colors flex items-center justify-center\"\n                >\n                  <Github className=\"mr-2 h-4 w-4\" />\n                  GitHub\n                </button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n};\n\nexport default Auth;","size_bytes":12003},"client/src/pages/Dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport Navbar from \"@/components/Navbar\";\nimport ImageUpload from \"@/components/ImageUpload\";\nimport BodyTypeResult from \"@/components/BodyTypeResult\";\nimport WorkoutRecommendations from \"@/components/WorkoutRecommendations\";\nimport { User, Activity, Target, Calendar } from \"lucide-react\";\n\nconst Dashboard = () => {\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [result, setResult] = useState<{\n    bodyType: 'Ectomorph' | 'Mesomorph' | 'Endomorph';\n    confidence: number;\n  } | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const { user } = useAuth();\n  const { toast } = useToast();\n\n  const getInitials = (email: string | undefined): string => {\n    if (!email) return \"U\";\n    return email.split('@')[0].slice(0, 2).toUpperCase();\n  };\n\n  const getDisplayName = (user: any): string => {\n    if (user?.user_metadata?.full_name) {\n      return user.user_metadata.full_name;\n    }\n    if (user?.email) {\n      return user.email.split('@')[0];\n    }\n    return \"User\";\n  };\n\n  const handleImageUpload = async (file: File) => {\n    setIsProcessing(true);\n    \n    // Simulate API call delay\n    await new Promise(resolve => setTimeout(resolve, 3000));\n    \n    // Mock classification results\n    const bodyTypes: Array<'Ectomorph' | 'Mesomorph' | 'Endomorph'> = ['Ectomorph', 'Mesomorph', 'Endomorph'];\n    const randomBodyType = bodyTypes[Math.floor(Math.random() * bodyTypes.length)];\n    const randomConfidence = Math.floor(Math.random() * 20) + 80;\n    \n    setResult({\n      bodyType: randomBodyType,\n      confidence: randomConfidence\n    });\n    \n    setIsProcessing(false);\n    \n    toast({\n      title: \"Analysis Complete!\",\n      description: `Your body type has been identified as ${randomBodyType} with ${randomConfidence}% confidence.`,\n    });\n  };\n\n  const handleGetPlan = () => {\n    toast({\n      title: \"Coming Soon!\",\n      description: \"Detailed workout plans will be available in the next update.\",\n    });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-primary/10 via-background to-secondary/10\">\n      <Navbar />\n      <div className=\"container mx-auto px-4 py-8 pt-24\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <Card className=\"bg-gradient-to-r from-primary/20 to-accent/20 border-0\">\n            <CardHeader>\n              <div className=\"flex items-center space-x-4\">\n                <Avatar className=\"h-16 w-16 bg-primary text-primary-foreground\">\n                  <AvatarFallback className=\"text-lg font-semibold\">\n                    {getInitials(user?.email)}\n                  </AvatarFallback>\n                </Avatar>\n                <div>\n                  <CardTitle className=\"text-2xl\">\n                    Welcome back, {getDisplayName(user)}!\n                  </CardTitle>\n                  <CardDescription className=\"text-foreground/70\">\n                    Ready to discover your body type and optimize your workouts?\n                  </CardDescription>\n                </div>\n              </div>\n            </CardHeader>\n          </Card>\n        </div>\n\n        {/* Stats Grid */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Total Analyses</CardTitle>\n              <Activity className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">1</div>\n              <p className=\"text-xs text-muted-foreground\">Body type scans completed</p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Workout Plans</CardTitle>\n              <Target className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">0</div>\n              <p className=\"text-xs text-muted-foreground\">Personalized plans generated</p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Days Active</CardTitle>\n              <Calendar className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">1</div>\n              <p className=\"text-xs text-muted-foreground\">Since joining FitType</p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Main Content */}\n        <div className=\"space-y-8\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <User className=\"h-5 w-5\" />\n                Body Type Analysis\n              </CardTitle>\n              <CardDescription>\n                Upload a photo to get your personalized body type classification\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <ImageUpload \n                onImageUpload={handleImageUpload} \n                isProcessing={isProcessing}\n              />\n            </CardContent>\n          </Card>\n\n          {result && (\n            <BodyTypeResult \n              bodyType={result.bodyType}\n              confidence={result.confidence}\n              onGetPlan={handleGetPlan}\n            />\n          )}\n\n          <WorkoutRecommendations selectedBodyType={result?.bodyType} />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Dashboard;","size_bytes":6081},"client/src/pages/Index.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useNavigate, useSearchParams } from \"react-router-dom\";\nimport Navbar from \"@/components/Navbar\";\nimport HeroSection from \"@/components/HeroSection\";\nimport FeaturesSection from \"@/components/FeaturesSection\";\nimport FinalCTA from \"@/components/FinalCTA\";\nimport ImageUpload from \"@/components/ImageUpload\";\nimport BodyTypeResult from \"@/components/BodyTypeResult\";\nimport WorkoutRecommendations from \"@/components/WorkoutRecommendations\";\nimport DietForm from \"@/components/DietForm\";\nimport DietPlan from \"@/components/DietPlan\";\nimport Footer from \"@/components/Footer\";\nimport { DietPlanResponse } from \"@/types/diet\";\n\ntype AIModel = 'body-type' | 'diet-plan';\n\nconst Index = () => {\n  const [searchParams] = useSearchParams();\n  const navigate = useNavigate();\n  const [selectedModel, setSelectedModel] = useState<AIModel | null>(null);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [result, setResult] = useState<{\n    bodyType: 'Ectomorph' | 'Mesomorph' | 'Endomorph';\n    confidence: number;\n  } | null>(null);\n  const [dietPlan, setDietPlan] = useState<DietPlanResponse | null>(null);\n  const [dietLoading, setDietLoading] = useState(false);\n  const { toast } = useToast();\n\n  // Check URL params on mount\n  useEffect(() => {\n    const modelParam = searchParams.get('model') as AIModel;\n    if (modelParam === 'body-type' || modelParam === 'diet-plan') {\n      setSelectedModel(modelParam);\n    }\n  }, [searchParams]);\n\n  // Simulate ML model processing\n  const handleImageUpload = async (file: File) => {\n    setIsProcessing(true);\n    \n    // Simulate API call delay\n    await new Promise(resolve => setTimeout(resolve, 3000));\n    \n    // Mock classification results (in real app, this would call your Python backend)\n    const bodyTypes: Array<'Ectomorph' | 'Mesomorph' | 'Endomorph'> = ['Ectomorph', 'Mesomorph', 'Endomorph'];\n    const randomBodyType = bodyTypes[Math.floor(Math.random() * bodyTypes.length)];\n    const randomConfidence = Math.floor(Math.random() * 20) + 80; // 80-99% confidence\n    \n    setResult({\n      bodyType: randomBodyType,\n      confidence: randomConfidence\n    });\n    \n    setIsProcessing(false);\n    \n    toast({\n      title: \"Analysis Complete!\",\n      description: `Your body type has been identified as ${randomBodyType} with ${randomConfidence}% confidence.`,\n    });\n  };\n\n  const handleGetPlan = () => {\n    toast({\n      title: \"Coming Soon!\",\n      description: \"Detailed workout plans will be available in the next update.\",\n    });\n  };\n\n  const handleDietPlanGenerated = (plan: DietPlanResponse) => {\n    setDietPlan(plan);\n  };\n\n  const handleNewDietPlan = () => {\n    setDietPlan(null);\n  };\n\n  const handleStartWorkout = () => {\n    setSelectedModel('body-type');\n  };\n\n  const handleExploreModels = () => {\n    navigate('/ai-models');\n  };\n\n  const handleBeginTraining = () => {\n    setSelectedModel('body-type');\n  };\n\n  // Landing page view\n  if (!selectedModel) {\n    return (\n      <div className=\"min-h-screen bg-black\">\n        <Navbar />\n        <HeroSection \n          onStartWorkout={handleStartWorkout}\n          onExploreModels={handleExploreModels}\n        />\n        <FeaturesSection />\n        <FinalCTA onBeginTraining={handleBeginTraining} />\n        <Footer />\n      </div>\n    );\n  }\n\n  // Model-specific views\n  return (\n    <div className=\"min-h-screen bg-black\">\n      <Navbar />\n      \n      <div className=\"pt-24 pb-16\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"flex items-center justify-between mb-8\">\n            <h2 className=\"text-3xl font-bold text-white\">\n              {selectedModel === 'body-type' ? 'Body Type Analysis' : 'Diet Plan Generator'}\n            </h2>\n            <button\n              onClick={() => setSelectedModel(null)}\n              className=\"bg-gray-700 hover:bg-gray-600 text-white px-4 py-2 rounded-lg transition-colors\"\n            >\n              Back to Home\n            </button>\n          </div>\n\n          {selectedModel === 'body-type' && (\n            <>\n              <ImageUpload \n                onImageUpload={handleImageUpload} \n                isProcessing={isProcessing}\n              />\n              {result && (\n                <BodyTypeResult \n                  bodyType={result.bodyType}\n                  confidence={result.confidence}\n                  onGetPlan={handleGetPlan}\n                />\n              )}\n              <WorkoutRecommendations selectedBodyType={result?.bodyType} />\n            </>\n          )}\n\n          {selectedModel === 'diet-plan' && !dietPlan && (\n            <DietForm \n              onPlanGenerated={handleDietPlanGenerated}\n              loading={dietLoading}\n              setLoading={setDietLoading}\n            />\n          )}\n\n          {selectedModel === 'diet-plan' && dietPlan && (\n            <DietPlan \n              plan={dietPlan}\n              onNewPlan={handleNewDietPlan}\n            />\n          )}\n        </div>\n      </div>\n      \n      <Footer />\n    </div>\n  );\n};\n\nexport default Index;\n","size_bytes":5179},"client/src/pages/NotFound.tsx":{"content":"import { useLocation } from \"react-router-dom\";\nimport { useEffect } from \"react\";\n\nconst NotFound = () => {\n  const location = useLocation();\n\n  useEffect(() => {\n    console.error(\n      \"404 Error: User attempted to access non-existent route:\",\n      location.pathname\n    );\n  }, [location.pathname]);\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-100\">\n      <div className=\"text-center\">\n        <h1 className=\"text-4xl font-bold mb-4\">404</h1>\n        <p className=\"text-xl text-gray-600 mb-4\">Oops! Page not found</p>\n        <a href=\"/\" className=\"text-blue-500 hover:text-blue-700 underline\">\n          Return to Home\n        </a>\n      </div>\n    </div>\n  );\n};\n\nexport default NotFound;\n","size_bytes":739},"client/src/types/diet.ts":{"content":"export interface UserData {\n  age: number;\n  height: number;\n  currentWeight: number;\n  targetWeight: number;\n  fitnessGoal: 'lose_weight' | 'gain_weight' | 'build_muscle' | 'maintain';\n  dietaryPreference: 'vegetarian' | 'non_vegetarian' | 'vegan' | 'keto' | 'paleo';\n  sugarIntake: 'low' | 'moderate' | 'high';\n  waterIntake: number;\n  upcomingEvent?: string;\n  sportsInterest?: string;\n  pastFitnessIssues?: string;\n}\n\nexport interface BMIData {\n  bmi: number;\n  category: string;\n  estimatedGoalDate: string;\n}\n\nexport interface DietPlanResponse {\n  userData: UserData;\n  bmiData: BMIData;\n  aiResponse: string;\n  timestamp: string;\n}","size_bytes":638},"project2.0/client/src/App.tsx":{"content":"import React, { useState } from 'react';\nimport { Moon, Sun, Heart, Zap, Target } from 'lucide-react';\nimport DietForm from './components/DietForm';\nimport DietPlan from './components/DietPlan';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport { UserData, DietPlanResponse } from './types';\n\nfunction App() {\n  const [darkMode, setDarkMode] = useState(false);\n  const [dietPlan, setDietPlan] = useState<DietPlanResponse | null>(null);\n  const [loading, setLoading] = useState(false);\n\n  const toggleDarkMode = () => {\n    setDarkMode(!darkMode);\n    document.documentElement.classList.toggle('dark');\n  };\n\n  const handlePlanGenerated = (plan: DietPlanResponse) => {\n    setDietPlan(plan);\n    setLoading(false);\n  };\n\n  const handleNewPlan = () => {\n    setDietPlan(null);\n  };\n\n  return (\n    <div className={`min-h-screen transition-colors duration-300 ${darkMode ? 'dark' : ''}`}>\n      <div className=\"bg-gray-50 dark:bg-gray-900 min-h-screen\">\n        <Header darkMode={darkMode} toggleDarkMode={toggleDarkMode} />\n        \n        <main className=\"container mx-auto px-4 py-8\">\n          {!dietPlan ? (\n            <>\n              {/* Hero Section */}\n              <div className=\"text-center mb-12 animate-fade-in\">\n                <div className=\"gradient-bg text-white rounded-2xl p-8 mb-8\">\n                  <h1 className=\"text-4xl md:text-6xl font-bold mb-4\">\n                    AI-Powered Diet Plan Generator\n                  </h1>\n                  <p className=\"text-xl md:text-2xl opacity-90 mb-6\">\n                    Get personalized nutrition plans tailored to your goals\n                  </p>\n                  <div className=\"flex justify-center space-x-8 text-sm md:text-base\">\n                    <div className=\"flex items-center space-x-2\">\n                      <Heart className=\"w-5 h-5\" />\n                      <span>Personalized</span>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <Zap className=\"w-5 h-5\" />\n                      <span>AI-Powered</span>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <Target className=\"w-5 h-5\" />\n                      <span>Goal-Oriented</span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              {/* Form Section */}\n              <DietForm \n                onPlanGenerated={handlePlanGenerated}\n                loading={loading}\n                setLoading={setLoading}\n              />\n            </>\n          ) : (\n            <DietPlan \n              plan={dietPlan} \n              onNewPlan={handleNewPlan}\n            />\n          )}\n        </main>\n\n        <Footer />\n      </div>\n    </div>\n  );\n}\n\nexport default App;","size_bytes":2841},"project2.0/client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  html {\n    scroll-behavior: smooth;\n  }\n  \n  body {\n    @apply bg-gray-50 dark:bg-gray-900 text-gray-900 dark:text-gray-100 transition-colors duration-300;\n  }\n}\n\n@layer components {\n  .btn-primary {\n    @apply bg-primary-600 hover:bg-primary-700 text-white font-semibold py-3 px-6 rounded-lg transition-all duration-200 transform hover:scale-105 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed disabled:transform-none;\n  }\n  \n  .btn-secondary {\n    @apply bg-gray-200 hover:bg-gray-300 dark:bg-gray-700 dark:hover:bg-gray-600 text-gray-800 dark:text-gray-200 font-semibold py-3 px-6 rounded-lg transition-all duration-200 transform hover:scale-105 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2;\n  }\n  \n  .input-field {\n    @apply w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100 transition-all duration-200;\n  }\n  \n  .card {\n    @apply bg-white dark:bg-gray-800 rounded-xl shadow-lg border border-gray-200 dark:border-gray-700 transition-all duration-300;\n  }\n  \n  .gradient-bg {\n    @apply bg-gradient-to-br from-primary-500 via-primary-600 to-primary-700;\n  }\n}\n\n/* Custom scrollbar */\n::-webkit-scrollbar {\n  width: 8px;\n}\n\n::-webkit-scrollbar-track {\n  @apply bg-gray-100 dark:bg-gray-800;\n}\n\n::-webkit-scrollbar-thumb {\n  @apply bg-gray-400 dark:bg-gray-600 rounded-full;\n}\n\n::-webkit-scrollbar-thumb:hover {\n  @apply bg-gray-500 dark:bg-gray-500;\n}\n\n/* Loading animation */\n.loading-dots {\n  display: inline-block;\n  position: relative;\n  width: 80px;\n  height: 80px;\n}\n\n.loading-dots div {\n  position: absolute;\n  top: 33px;\n  width: 13px;\n  height: 13px;\n  border-radius: 50%;\n  background: #0ea5e9;\n  animation-timing-function: cubic-bezier(0, 1, 1, 0);\n}\n\n.loading-dots div:nth-child(1) {\n  left: 8px;\n  animation: loading-dots1 0.6s infinite;\n}\n\n.loading-dots div:nth-child(2) {\n  left: 8px;\n  animation: loading-dots2 0.6s infinite;\n}\n\n.loading-dots div:nth-child(3) {\n  left: 32px;\n  animation: loading-dots2 0.6s infinite;\n}\n\n.loading-dots div:nth-child(4) {\n  left: 56px;\n  animation: loading-dots3 0.6s infinite;\n}\n\n@keyframes loading-dots1 {\n  0% { transform: scale(0); }\n  100% { transform: scale(1); }\n}\n\n@keyframes loading-dots3 {\n  0% { transform: scale(1); }\n  100% { transform: scale(0); }\n}\n\n@keyframes loading-dots2 {\n  0% { transform: translate(0, 0); }\n  100% { transform: translate(24px, 0); }\n}","size_bytes":2644},"project2.0/client/src/main.tsx":{"content":"import React from 'react'\nimport ReactDOM from 'react-dom/client'\nimport App from './App.tsx'\nimport './index.css'\n\nReactDOM.createRoot(document.getElementById('root')!).render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n)","size_bytes":235},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"import * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1405},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:size-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2701},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-all duration-300 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90 shadow-soft hover:shadow-medium\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80 shadow-soft hover:shadow-medium\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n        hero: \"bg-gradient-to-r from-primary to-secondary text-white hover:from-primary-glow hover:to-secondary/90 shadow-strong hover:shadow-[0_20px_50px_hsl(var(--primary)/0.3)] hover:scale-105 transform\",\n        \"ghost-light\": \"border-2 border-white/30 text-white hover:bg-white/20 backdrop-blur-sm hover:border-white/50\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2302},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\";\nimport { ChevronLeft, ChevronRight } from \"lucide-react\";\nimport { DayPicker } from \"react-day-picker\";\n\nimport { cn } from \"@/lib/utils\";\nimport { buttonVariants } from \"@/components/ui/button\";\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>;\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground opacity-50 aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ ..._props }) => <ChevronLeft className=\"h-4 w-4\" />,\n        IconRight: ({ ..._props }) => <ChevronRight className=\"h-4 w-4\" />,\n      }}\n      {...props}\n    />\n  );\n}\nCalendar.displayName = \"Calendar\";\n\nexport { Calendar };\n","size_bytes":2620},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h3\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <p\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1877},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"import * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([_, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item.dataKey || item.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10466},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"import * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":315},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\ninterface CommandDialogProps extends DialogProps {}\n\nconst CommandDialog = ({ children, ...props }: CommandDialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4879},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7246},"client/src/components/ui/dialog.tsx":{"content":"import * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3835},"client/src/components/ui/drawer.tsx":{"content":"import * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3007},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7295},"client/src/components/ui/form.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  ControllerProps,\n  FieldPath,\n  FieldValues,\n  FormProvider,\n  useFormContext,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message) : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4085},"client/src/components/ui/hover-card.tsx":{"content":"import * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1184},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"import * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst MenubarMenu = MenubarPrimitive.Menu\n\nconst MenubarGroup = MenubarPrimitive.Group\n\nconst MenubarPortal = MenubarPrimitive.Portal\n\nconst MenubarSub = MenubarPrimitive.Sub\n\nconst MenubarRadioGroup = MenubarPrimitive.RadioGroup\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":7974},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5046},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1230},"client/src/components/ui/progress.tsx":{"content":"import * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":777},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"import { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1709},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"import * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5615},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"import * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\nimport * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n  VariantProps<typeof sheetVariants> { }\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet, SheetClose,\n  SheetContent, SheetDescription, SheetFooter, SheetHeader, SheetOverlay, SheetPortal, SheetTitle, SheetTrigger\n}\n\n","size_bytes":4250},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport { Sheet, SheetContent } from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar:state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContext = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContext | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContext>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden md:block text-sidebar-foreground\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex min-h-svh flex-1 flex-col bg-background\",\n        \"peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"rounded-md h-8 flex gap-2 px-2 items-center\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 flex-1 max-w-[--skeleton-width]\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23367},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/sonner.tsx":{"content":"import { useTheme } from \"next-themes\"\nimport { Toaster as Sonner, toast } from \"sonner\"\n\ntype ToasterProps = React.ComponentProps<typeof Sonner>\n\nconst Toaster = ({ ...props }: ToasterProps) => {\n  const { theme = \"system\" } = useTheme()\n\n  return (\n    <Sonner\n      theme={theme as ToasterProps[\"theme\"]}\n      className=\"toaster group\"\n      toastOptions={{\n        classNames: {\n          toast:\n            \"group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg\",\n          description: \"group-[.toast]:text-muted-foreground\",\n          actionButton:\n            \"group-[.toast]:bg-primary group-[.toast]:text-primary-foreground\",\n          cancelButton:\n            \"group-[.toast]:bg-muted group-[.toast]:text-muted-foreground\",\n        },\n      }}\n      {...props}\n    />\n  )\n}\n\nexport { Toaster, toast }\n","size_bytes":894},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface TextareaProps\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\n  ({ className, ...props }, ref) => {\n    return (\n      <textarea\n        className={cn(\n          \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":772},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"import * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1739},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3\",\n        sm: \"h-9 px-2.5\",\n        lg: \"h-11 px-5\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1435},"client/src/components/ui/tooltip.tsx":{"content":"import * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1145},"client/src/components/ui/use-toast.ts":{"content":"import { useToast, toast } from \"@/hooks/use-toast\";\n\nexport { useToast, toast };\n","size_bytes":82},"project2.0/client/src/components/BMICalculator.tsx":{"content":"import React from 'react';\nimport { Calculator, TrendingUp, TrendingDown, Minus } from 'lucide-react';\n\ninterface BMICalculatorProps {\n  height: number;\n  weight: number;\n  targetWeight: number;\n}\n\nconst BMICalculator: React.FC<BMICalculatorProps> = ({ height, weight, targetWeight }) => {\n  const calculateBMI = (weight: number, height: number): number => {\n    const heightInMeters = height / 100;\n    return weight / (heightInMeters * heightInMeters);\n  };\n\n  const getBMICategory = (bmi: number): { category: string; color: string } => {\n    if (bmi < 18.5) return { category: 'Underweight', color: 'text-blue-600' };\n    if (bmi < 25) return { category: 'Normal', color: 'text-green-600' };\n    if (bmi < 30) return { category: 'Overweight', color: 'text-yellow-600' };\n    return { category: 'Obese', color: 'text-red-600' };\n  };\n\n  const getEstimatedDate = (currentWeight: number, targetWeight: number): string => {\n    const weightDifference = Math.abs(currentWeight - targetWeight);\n    const daysNeeded = Math.ceil(weightDifference * 15); // 15 days per kg\n    const targetDate = new Date();\n    targetDate.setDate(targetDate.getDate() + daysNeeded);\n    return targetDate.toLocaleDateString('en-US', { \n      year: 'numeric', \n      month: 'long', \n      day: 'numeric' \n    });\n  };\n\n  const currentBMI = calculateBMI(weight, height);\n  const targetBMI = calculateBMI(targetWeight, height);\n  const currentBMIData = getBMICategory(currentBMI);\n  const targetBMIData = getBMICategory(targetBMI);\n  const estimatedDate = getEstimatedDate(weight, targetWeight);\n\n  const getGoalIcon = () => {\n    if (targetWeight < weight) return <TrendingDown className=\"w-5 h-5 text-red-500\" />;\n    if (targetWeight > weight) return <TrendingUp className=\"w-5 h-5 text-green-500\" />;\n    return <Minus className=\"w-5 h-5 text-gray-500\" />;\n  };\n\n  return (\n    <div className=\"card p-6 bg-gradient-to-r from-blue-50 to-indigo-50 dark:from-gray-800 dark:to-gray-700\">\n      <div className=\"flex items-center mb-4\">\n        <Calculator className=\"w-6 h-6 text-primary-600 mr-2\" />\n        <h3 className=\"text-xl font-semibold text-gray-900 dark:text-white\">\n          BMI Analysis\n        </h3>\n      </div>\n      \n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n        <div className=\"text-center\">\n          <div className=\"text-3xl font-bold text-primary-600 mb-1\">\n            {currentBMI.toFixed(1)}\n          </div>\n          <div className={`text-sm font-medium ${currentBMIData.color} mb-1`}>\n            {currentBMIData.category}\n          </div>\n          <div className=\"text-xs text-gray-500 dark:text-gray-400\">\n            Current BMI\n          </div>\n        </div>\n        \n        <div className=\"text-center\">\n          <div className=\"text-3xl font-bold text-primary-600 mb-1\">\n            {targetBMI.toFixed(1)}\n          </div>\n          <div className={`text-sm font-medium ${targetBMIData.color} mb-1`}>\n            {targetBMIData.category}\n          </div>\n          <div className=\"text-xs text-gray-500 dark:text-gray-400\">\n            Target BMI\n          </div>\n        </div>\n        \n        <div className=\"text-center\">\n          <div className=\"flex items-center justify-center mb-2\">\n            {getGoalIcon()}\n            <span className=\"text-lg font-semibold text-gray-700 dark:text-gray-300 ml-2\">\n              {Math.abs(weight - targetWeight).toFixed(1)} kg\n            </span>\n          </div>\n          <div className=\"text-sm text-gray-600 dark:text-gray-400 mb-1\">\n            Goal by {estimatedDate}\n          </div>\n          <div className=\"text-xs text-gray-500 dark:text-gray-400\">\n            Estimated timeline\n          </div>\n        </div>\n      </div>\n      \n      <div className=\"mt-4 p-3 bg-white dark:bg-gray-800 rounded-lg\">\n        <p className=\"text-sm text-gray-600 dark:text-gray-400 text-center\">\n          <strong>Note:</strong> Timeline estimate is based on healthy weight change of ~0.5kg per week. \n          Actual results may vary based on individual factors.\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default BMICalculator;","size_bytes":4116},"project2.0/client/src/components/DietForm.tsx":{"content":"import React, { useState } from 'react';\nimport { Calculator, Target, Droplets, Calendar, Activity, AlertCircle } from 'lucide-react';\nimport axios from 'axios';\nimport { UserData, DietPlanResponse } from '../types';\nimport BMICalculator from './BMICalculator';\nimport LoadingSpinner from './LoadingSpinner';\n\ninterface DietFormProps {\n  onPlanGenerated: (plan: DietPlanResponse) => void;\n  loading: boolean;\n  setLoading: (loading: boolean) => void;\n}\n\nconst DietForm: React.FC<DietFormProps> = ({ onPlanGenerated, loading, setLoading }) => {\n  const [formData, setFormData] = useState<UserData>({\n    age: 25,\n    height: 170,\n    currentWeight: 70,\n    targetWeight: 65,\n    fitnessGoal: 'lose_weight',\n    dietaryPreference: 'vegetarian',\n    sugarIntake: 'moderate',\n    waterIntake: 8,\n    upcomingEvent: '',\n    sportsInterest: '',\n    pastFitnessIssues: '',\n  });\n\n  const [errors, setErrors] = useState<Partial<UserData>>({});\n\n  const validateForm = (): boolean => {\n    const newErrors: Partial<UserData> = {};\n\n    if (formData.age < 16 || formData.age > 100) {\n      newErrors.age = 16;\n    }\n    if (formData.height < 100 || formData.height > 250) {\n      newErrors.height = 100;\n    }\n    if (formData.currentWeight < 30 || formData.currentWeight > 300) {\n      newErrors.currentWeight = 30;\n    }\n    if (formData.targetWeight < 30 || formData.targetWeight > 300) {\n      newErrors.targetWeight = 30;\n    }\n    if (formData.waterIntake < 1 || formData.waterIntake > 20) {\n      newErrors.waterIntake = 1;\n    }\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!validateForm()) {\n      return;\n    }\n\n    setLoading(true);\n    \n    try {\n      const response = await axios.post('/api/generate-plan', formData);\n      onPlanGenerated(response.data);\n    } catch (error) {\n      console.error('Error generating plan:', error);\n      alert('Failed to generate diet plan. Please try again.');\n      setLoading(false);\n    }\n  };\n\n  const handleInputChange = (field: keyof UserData, value: any) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n    if (errors[field]) {\n      setErrors(prev => ({ ...prev, [field]: undefined }));\n    }\n  };\n\n  if (loading) {\n    return <LoadingSpinner />;\n  }\n\n  return (\n    <div className=\"max-w-4xl mx-auto\">\n      <div className=\"card p-8 animate-slide-up\">\n        <div className=\"mb-8\">\n          <h2 className=\"text-3xl font-bold text-gray-900 dark:text-white mb-2\">\n            Tell us about yourself\n          </h2>\n          <p className=\"text-gray-600 dark:text-gray-400\">\n            Provide your details to get a personalized diet plan\n          </p>\n        </div>\n\n        <form onSubmit={handleSubmit} className=\"space-y-8\">\n          {/* Basic Information */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n                <Calculator className=\"w-4 h-4 inline mr-2\" />\n                Age (years)\n              </label>\n              <input\n                type=\"number\"\n                value={formData.age}\n                onChange={(e) => handleInputChange('age', parseInt(e.target.value))}\n                className={`input-field ${errors.age ? 'border-red-500' : ''}`}\n                min=\"16\"\n                max=\"100\"\n                required\n              />\n              {errors.age && (\n                <p className=\"text-red-500 text-xs mt-1 flex items-center\">\n                  <AlertCircle className=\"w-3 h-3 mr-1\" />\n                  Age must be between 16-100\n                </p>\n              )}\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n                Height (cm)\n              </label>\n              <input\n                type=\"number\"\n                value={formData.height}\n                onChange={(e) => handleInputChange('height', parseInt(e.target.value))}\n                className={`input-field ${errors.height ? 'border-red-500' : ''}`}\n                min=\"100\"\n                max=\"250\"\n                required\n              />\n              {errors.height && (\n                <p className=\"text-red-500 text-xs mt-1 flex items-center\">\n                  <AlertCircle className=\"w-3 h-3 mr-1\" />\n                  Height must be between 100-250 cm\n                </p>\n              )}\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n                Current Weight (kg)\n              </label>\n              <input\n                type=\"number\"\n                value={formData.currentWeight}\n                onChange={(e) => handleInputChange('currentWeight', parseInt(e.target.value))}\n                className={`input-field ${errors.currentWeight ? 'border-red-500' : ''}`}\n                min=\"30\"\n                max=\"300\"\n                required\n              />\n              {errors.currentWeight && (\n                <p className=\"text-red-500 text-xs mt-1 flex items-center\">\n                  <AlertCircle className=\"w-3 h-3 mr-1\" />\n                  Weight must be between 30-300 kg\n                </p>\n              )}\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n                <Target className=\"w-4 h-4 inline mr-2\" />\n                Target Weight (kg)\n              </label>\n              <input\n                type=\"number\"\n                value={formData.targetWeight}\n                onChange={(e) => handleInputChange('targetWeight', parseInt(e.target.value))}\n                className={`input-field ${errors.targetWeight ? 'border-red-500' : ''}`}\n                min=\"30\"\n                max=\"300\"\n                required\n              />\n              {errors.targetWeight && (\n                <p className=\"text-red-500 text-xs mt-1 flex items-center\">\n                  <AlertCircle className=\"w-3 h-3 mr-1\" />\n                  Weight must be between 30-300 kg\n                </p>\n              )}\n            </div>\n          </div>\n\n          {/* BMI Calculator */}\n          <BMICalculator \n            height={formData.height} \n            weight={formData.currentWeight}\n            targetWeight={formData.targetWeight}\n          />\n\n          {/* Goals and Preferences */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n                Fitness Goal\n              </label>\n              <select\n                value={formData.fitnessGoal}\n                onChange={(e) => handleInputChange('fitnessGoal', e.target.value)}\n                className=\"input-field\"\n                required\n              >\n                <option value=\"lose_weight\">Lose Weight</option>\n                <option value=\"gain_weight\">Gain Weight</option>\n                <option value=\"build_muscle\">Build Muscle</option>\n                <option value=\"maintain\">Maintain Current Weight</option>\n              </select>\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n                Dietary Preference\n              </label>\n              <select\n                value={formData.dietaryPreference}\n                onChange={(e) => handleInputChange('dietaryPreference', e.target.value)}\n                className=\"input-field\"\n                required\n              >\n                <option value=\"vegetarian\">Vegetarian</option>\n                <option value=\"non_vegetarian\">Non-Vegetarian</option>\n                <option value=\"vegan\">Vegan</option>\n                <option value=\"keto\">Keto</option>\n                <option value=\"paleo\">Paleo</option>\n              </select>\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n                Sugar Intake Frequency\n              </label>\n              <select\n                value={formData.sugarIntake}\n                onChange={(e) => handleInputChange('sugarIntake', e.target.value)}\n                className=\"input-field\"\n                required\n              >\n                <option value=\"low\">Low (Rarely)</option>\n                <option value=\"moderate\">Moderate (Sometimes)</option>\n                <option value=\"high\">High (Frequently)</option>\n              </select>\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n                <Droplets className=\"w-4 h-4 inline mr-2\" />\n                Daily Water Intake (glasses)\n              </label>\n              <input\n                type=\"number\"\n                value={formData.waterIntake}\n                onChange={(e) => handleInputChange('waterIntake', parseInt(e.target.value))}\n                className={`input-field ${errors.waterIntake ? 'border-red-500' : ''}`}\n                min=\"1\"\n                max=\"20\"\n                required\n              />\n              {errors.waterIntake && (\n                <p className=\"text-red-500 text-xs mt-1 flex items-center\">\n                  <AlertCircle className=\"w-3 h-3 mr-1\" />\n                  Water intake must be between 1-20 glasses\n                </p>\n              )}\n            </div>\n          </div>\n\n          {/* Optional Information */}\n          <div className=\"space-y-6\">\n            <h3 className=\"text-xl font-semibold text-gray-900 dark:text-white\">\n              Additional Information (Optional)\n            </h3>\n            \n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n                <Calendar className=\"w-4 h-4 inline mr-2\" />\n                Upcoming Event\n              </label>\n              <input\n                type=\"text\"\n                value={formData.upcomingEvent}\n                onChange={(e) => handleInputChange('upcomingEvent', e.target.value)}\n                className=\"input-field\"\n                placeholder=\"e.g., Wedding, Marathon, Beach vacation\"\n              />\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n                <Activity className=\"w-4 h-4 inline mr-2\" />\n                Sports Interest\n              </label>\n              <input\n                type=\"text\"\n                value={formData.sportsInterest}\n                onChange={(e) => handleInputChange('sportsInterest', e.target.value)}\n                className=\"input-field\"\n                placeholder=\"e.g., Running, Swimming, Yoga, Gym\"\n              />\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n                Past Fitness Issues\n              </label>\n              <textarea\n                value={formData.pastFitnessIssues}\n                onChange={(e) => handleInputChange('pastFitnessIssues', e.target.value)}\n                className=\"input-field\"\n                rows={3}\n                placeholder=\"Any past injuries, medical conditions, or dietary restrictions\"\n              />\n            </div>\n          </div>\n\n          <div className=\"flex justify-center pt-6\">\n            <button\n              type=\"submit\"\n              disabled={loading}\n              className=\"btn-primary text-lg px-12 py-4 disabled:opacity-50 disabled:cursor-not-allowed\"\n            >\n              {loading ? 'Generating Your Plan...' : 'Generate My Diet Plan'}\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default DietForm;","size_bytes":12101},"project2.0/client/src/components/DietPlan.tsx":{"content":"import React, { useState } from 'react';\nimport { Download, RefreshCw, Calendar, User, Target, Droplets, ChevronDown, ChevronUp } from 'lucide-react';\nimport { DietPlanResponse } from '../types';\nimport jsPDF from 'jspdf';\n\ninterface DietPlanProps {\n  plan: DietPlanResponse;\n  onNewPlan: () => void;\n}\n\nconst DietPlan: React.FC<DietPlanProps> = ({ plan, onNewPlan }) => {\n  const [expandedSections, setExpandedSections] = useState<Set<string>>(new Set(['summary']));\n\n  const toggleSection = (section: string) => {\n    const newExpanded = new Set(expandedSections);\n    if (newExpanded.has(section)) {\n      newExpanded.delete(section);\n    } else {\n      newExpanded.add(section);\n    }\n    setExpandedSections(newExpanded);\n  };\n\n  const downloadPDF = () => {\n    const pdf = new jsPDF();\n    const pageWidth = pdf.internal.pageSize.getWidth();\n    const margin = 20;\n    let yPosition = margin;\n\n    // Title\n    pdf.setFontSize(20);\n    pdf.setFont('helvetica', 'bold');\n    pdf.text('Personalized Diet Plan', margin, yPosition);\n    yPosition += 15;\n\n    // Date\n    pdf.setFontSize(10);\n    pdf.setFont('helvetica', 'normal');\n    pdf.text(`Generated on: ${new Date(plan.timestamp).toLocaleDateString()}`, margin, yPosition);\n    yPosition += 20;\n\n    // User Info\n    pdf.setFontSize(14);\n    pdf.setFont('helvetica', 'bold');\n    pdf.text('Personal Information', margin, yPosition);\n    yPosition += 10;\n\n    pdf.setFontSize(10);\n    pdf.setFont('helvetica', 'normal');\n    const userInfo = [\n      `Age: ${plan.userData.age} years`,\n      `Height: ${plan.userData.height} cm`,\n      `Current Weight: ${plan.userData.currentWeight} kg`,\n      `Target Weight: ${plan.userData.targetWeight} kg`,\n      `BMI: ${plan.bmiData.bmi.toFixed(1)} (${plan.bmiData.category})`,\n      `Goal: ${plan.userData.fitnessGoal.replace('_', ' ')}`,\n      `Diet Preference: ${plan.userData.dietaryPreference}`,\n    ];\n\n    userInfo.forEach(info => {\n      pdf.text(info, margin, yPosition);\n      yPosition += 6;\n    });\n\n    yPosition += 10;\n\n    // Diet Plan Content\n    pdf.setFontSize(14);\n    pdf.setFont('helvetica', 'bold');\n    pdf.text('Diet Plan', margin, yPosition);\n    yPosition += 10;\n\n    pdf.setFontSize(9);\n    pdf.setFont('helvetica', 'normal');\n    \n    const lines = pdf.splitTextToSize(plan.aiResponse, pageWidth - 2 * margin);\n    lines.forEach((line: string) => {\n      if (yPosition > pdf.internal.pageSize.getHeight() - margin) {\n        pdf.addPage();\n        yPosition = margin;\n      }\n      pdf.text(line, margin, yPosition);\n      yPosition += 5;\n    });\n\n    pdf.save('diet-plan.pdf');\n  };\n\n  const formatAIResponse = (response: string) => {\n    const sections = response.split(/(?=\\*\\*[A-Z][^*]*\\*\\*)/);\n    return sections.filter(section => section.trim());\n  };\n\n  const extractSectionTitle = (section: string) => {\n    const match = section.match(/\\*\\*([^*]+)\\*\\*/);\n    return match ? match[1] : 'Content';\n  };\n\n  const cleanSectionContent = (section: string) => {\n    return section.replace(/\\*\\*[^*]+\\*\\*/, '').trim();\n  };\n\n  const sections = formatAIResponse(plan.aiResponse);\n\n  return (\n    <div className=\"max-w-6xl mx-auto space-y-8 animate-fade-in\">\n      {/* Header */}\n      <div className=\"card p-8 gradient-bg text-white\">\n        <div className=\"flex flex-col md:flex-row justify-between items-start md:items-center space-y-4 md:space-y-0\">\n          <div>\n            <h1 className=\"text-3xl font-bold mb-2\">Your Personalized Diet Plan</h1>\n            <p className=\"text-lg opacity-90\">\n              Generated on {new Date(plan.timestamp).toLocaleDateString()}\n            </p>\n          </div>\n          <div className=\"flex space-x-4\">\n            <button\n              onClick={downloadPDF}\n              className=\"bg-white text-primary-600 hover:bg-gray-100 font-semibold py-2 px-4 rounded-lg transition-colors duration-200 flex items-center space-x-2\"\n            >\n              <Download className=\"w-4 h-4\" />\n              <span>Download PDF</span>\n            </button>\n            <button\n              onClick={onNewPlan}\n              className=\"bg-white/20 hover:bg-white/30 text-white font-semibold py-2 px-4 rounded-lg transition-colors duration-200 flex items-center space-x-2\"\n            >\n              <RefreshCw className=\"w-4 h-4\" />\n              <span>New Plan</span>\n            </button>\n          </div>\n        </div>\n      </div>\n\n      {/* Summary Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        <div className=\"card p-6 text-center\">\n          <User className=\"w-8 h-8 text-primary-600 mx-auto mb-3\" />\n          <div className=\"text-2xl font-bold text-gray-900 dark:text-white mb-1\">\n            {plan.bmiData.bmi.toFixed(1)}\n          </div>\n          <div className=\"text-sm text-gray-600 dark:text-gray-400\">\n            BMI ({plan.bmiData.category})\n          </div>\n        </div>\n\n        <div className=\"card p-6 text-center\">\n          <Target className=\"w-8 h-8 text-green-600 mx-auto mb-3\" />\n          <div className=\"text-2xl font-bold text-gray-900 dark:text-white mb-1\">\n            {Math.abs(plan.userData.currentWeight - plan.userData.targetWeight)} kg\n          </div>\n          <div className=\"text-sm text-gray-600 dark:text-gray-400\">\n            Weight Goal\n          </div>\n        </div>\n\n        <div className=\"card p-6 text-center\">\n          <Calendar className=\"w-8 h-8 text-blue-600 mx-auto mb-3\" />\n          <div className=\"text-2xl font-bold text-gray-900 dark:text-white mb-1\">\n            {plan.bmiData.estimatedGoalDate}\n          </div>\n          <div className=\"text-sm text-gray-600 dark:text-gray-400\">\n            Target Date\n          </div>\n        </div>\n\n        <div className=\"card p-6 text-center\">\n          <Droplets className=\"w-8 h-8 text-cyan-600 mx-auto mb-3\" />\n          <div className=\"text-2xl font-bold text-gray-900 dark:text-white mb-1\">\n            {plan.userData.waterIntake}\n          </div>\n          <div className=\"text-sm text-gray-600 dark:text-gray-400\">\n            Glasses/Day\n          </div>\n        </div>\n      </div>\n\n      {/* Diet Plan Content */}\n      <div className=\"space-y-4\">\n        {sections.map((section, index) => {\n          const title = extractSectionTitle(section);\n          const content = cleanSectionContent(section);\n          const sectionKey = `section-${index}`;\n          const isExpanded = expandedSections.has(sectionKey);\n\n          return (\n            <div key={index} className=\"card overflow-hidden\">\n              <button\n                onClick={() => toggleSection(sectionKey)}\n                className=\"w-full p-6 text-left hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors duration-200 flex items-center justify-between\"\n              >\n                <h3 className=\"text-xl font-semibold text-gray-900 dark:text-white\">\n                  {title}\n                </h3>\n                {isExpanded ? (\n                  <ChevronUp className=\"w-5 h-5 text-gray-500\" />\n                ) : (\n                  <ChevronDown className=\"w-5 h-5 text-gray-500\" />\n                )}\n              </button>\n              \n              {isExpanded && (\n                <div className=\"px-6 pb-6 border-t border-gray-200 dark:border-gray-700\">\n                  <div className=\"pt-4 prose prose-gray dark:prose-invert max-w-none\">\n                    <pre className=\"whitespace-pre-wrap font-sans text-gray-700 dark:text-gray-300 leading-relaxed\">\n                      {content}\n                    </pre>\n                  </div>\n                </div>\n              )}\n            </div>\n          );\n        })}\n      </div>\n\n      {/* Action Buttons */}\n      <div className=\"flex justify-center space-x-4 pt-8\">\n        <button\n          onClick={downloadPDF}\n          className=\"btn-primary flex items-center space-x-2\"\n        >\n          <Download className=\"w-4 h-4\" />\n          <span>Download as PDF</span>\n        </button>\n        <button\n          onClick={onNewPlan}\n          className=\"btn-secondary flex items-center space-x-2\"\n        >\n          <RefreshCw className=\"w-4 h-4\" />\n          <span>Generate New Plan</span>\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default DietPlan;","size_bytes":8256},"project2.0/client/src/components/Footer.tsx":{"content":"import React from 'react';\nimport { Heart, Github, Twitter, Mail } from 'lucide-react';\n\nconst Footer: React.FC = () => {\n  return (\n    <footer className=\"bg-white dark:bg-gray-800 border-t border-gray-200 dark:border-gray-700 mt-16\">\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n          <div>\n            <h3 className=\"text-lg font-semibold mb-4 text-gray-900 dark:text-white\">\n              Diet Plan Generator\n            </h3>\n            <p className=\"text-gray-600 dark:text-gray-400 mb-4\">\n              AI-powered personalized nutrition plans to help you achieve your health and fitness goals.\n            </p>\n            <div className=\"flex items-center text-sm text-gray-500 dark:text-gray-400\">\n              Made with <Heart className=\"w-4 h-4 mx-1 text-red-500\" /> for your health\n            </div>\n          </div>\n          \n          <div>\n            <h4 className=\"text-md font-semibold mb-4 text-gray-900 dark:text-white\">\n              Features\n            </h4>\n            <ul className=\"space-y-2 text-gray-600 dark:text-gray-400\">\n              <li>• Personalized meal plans</li>\n              <li>• BMI calculation</li>\n              <li>• Goal tracking</li>\n              <li>• AI-powered recommendations</li>\n              <li>• PDF export</li>\n            </ul>\n          </div>\n          \n          <div>\n            <h4 className=\"text-md font-semibold mb-4 text-gray-900 dark:text-white\">\n              Connect\n            </h4>\n            <div className=\"flex space-x-4\">\n              <a\n                href=\"#\"\n                className=\"p-2 rounded-lg bg-gray-100 dark:bg-gray-700 hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors duration-200\"\n                aria-label=\"GitHub\"\n              >\n                <Github className=\"w-5 h-5 text-gray-600 dark:text-gray-400\" />\n              </a>\n              <a\n                href=\"#\"\n                className=\"p-2 rounded-lg bg-gray-100 dark:bg-gray-700 hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors duration-200\"\n                aria-label=\"Twitter\"\n              >\n                <Twitter className=\"w-5 h-5 text-gray-600 dark:text-gray-400\" />\n              </a>\n              <a\n                href=\"#\"\n                className=\"p-2 rounded-lg bg-gray-100 dark:bg-gray-700 hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors duration-200\"\n                aria-label=\"Email\"\n              >\n                <Mail className=\"w-5 h-5 text-gray-600 dark:text-gray-400\" />\n              </a>\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"border-t border-gray-200 dark:border-gray-700 mt-8 pt-8 text-center\">\n          <p className=\"text-gray-500 dark:text-gray-400 text-sm\">\n            © 2024 Diet Plan Generator. All rights reserved.\n          </p>\n        </div>\n      </div>\n    </footer>\n  );\n};\n\nexport default Footer;","size_bytes":2974},"project2.0/client/src/components/Header.tsx":{"content":"import React from 'react';\nimport { Moon, Sun, Utensils } from 'lucide-react';\n\ninterface HeaderProps {\n  darkMode: boolean;\n  toggleDarkMode: () => void;\n}\n\nconst Header: React.FC<HeaderProps> = ({ darkMode, toggleDarkMode }) => {\n  return (\n    <header className=\"bg-white dark:bg-gray-800 shadow-lg border-b border-gray-200 dark:border-gray-700\">\n      <div className=\"container mx-auto px-4 py-4\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"gradient-bg p-2 rounded-lg\">\n              <Utensils className=\"w-6 h-6 text-white\" />\n            </div>\n            <div>\n              <h1 className=\"text-xl font-bold text-gray-900 dark:text-white\">\n                Diet Plan Generator\n              </h1>\n              <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                AI-Powered Nutrition\n              </p>\n            </div>\n          </div>\n          \n          <button\n            onClick={toggleDarkMode}\n            className=\"p-2 rounded-lg bg-gray-100 dark:bg-gray-700 hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors duration-200\"\n            aria-label=\"Toggle dark mode\"\n          >\n            {darkMode ? (\n              <Sun className=\"w-5 h-5 text-yellow-500\" />\n            ) : (\n              <Moon className=\"w-5 h-5 text-gray-600\" />\n            )}\n          </button>\n        </div>\n      </div>\n    </header>\n  );\n};\n\nexport default Header;","size_bytes":1495},"project2.0/client/src/components/LoadingSpinner.tsx":{"content":"import React from 'react';\nimport { Brain, Utensils, Heart } from 'lucide-react';\n\nconst LoadingSpinner: React.FC = () => {\n  return (\n    <div className=\"flex flex-col items-center justify-center min-h-[60vh] space-y-8\">\n      <div className=\"relative\">\n        <div className=\"loading-dots\">\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n        </div>\n      </div>\n      \n      <div className=\"text-center space-y-4\">\n        <div className=\"flex items-center justify-center space-x-4 text-primary-600\">\n          <Brain className=\"w-8 h-8 animate-pulse\" />\n          <Utensils className=\"w-8 h-8 animate-pulse\" style={{ animationDelay: '0.2s' }} />\n          <Heart className=\"w-8 h-8 animate-pulse\" style={{ animationDelay: '0.4s' }} />\n        </div>\n        \n        <h2 className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n          Generating Your Personalized Diet Plan\n        </h2>\n        \n        <div className=\"space-y-2 text-gray-600 dark:text-gray-400\">\n          <p className=\"animate-pulse\">🧠 Analyzing your health profile...</p>\n          <p className=\"animate-pulse\" style={{ animationDelay: '1s' }}>\n            🍽️ Creating customized meal plans...\n          </p>\n          <p className=\"animate-pulse\" style={{ animationDelay: '2s' }}>\n            💪 Calculating nutritional requirements...\n          </p>\n          <p className=\"animate-pulse\" style={{ animationDelay: '3s' }}>\n            ✨ Finalizing your recommendations...\n          </p>\n        </div>\n        \n        <div className=\"text-sm text-gray-500 dark:text-gray-400 mt-6\">\n          This usually takes 10-15 seconds\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default LoadingSpinner;","size_bytes":1747},"project2.0/client/src/types/index.ts":{"content":"export interface UserData {\n  age: number;\n  height: number;\n  currentWeight: number;\n  targetWeight: number;\n  fitnessGoal: 'lose_weight' | 'gain_weight' | 'build_muscle' | 'maintain';\n  dietaryPreference: 'vegetarian' | 'non_vegetarian' | 'vegan' | 'keto' | 'paleo';\n  sugarIntake: 'low' | 'moderate' | 'high';\n  waterIntake: number;\n  upcomingEvent?: string;\n  sportsInterest?: string;\n  pastFitnessIssues?: string;\n}\n\nexport interface BMIData {\n  bmi: number;\n  category: string;\n  estimatedGoalDate: string;\n}\n\nexport interface DietPlanResponse {\n  userData: UserData;\n  bmiData: BMIData;\n  aiResponse: string;\n  timestamp: string;\n}","size_bytes":638}},"version":1}